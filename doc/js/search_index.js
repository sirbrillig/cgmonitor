var search_data = {"index":{"searchIndex":["activeblacklistplugin","atmailplugin","base64","blacklistplugin","cgmonitor","monitor","plugin","cgpclamavcrash","cgpmcafeecounter","cgpmcafeesparkwatcher","cgpspamcatchercounter","cgpspamcatcherrestart","checksize","corruptedmailbox","emailstats","file","tail","breakexception","deletedexception","logfile","reopenexception","returnexception","tailexception","frequentsendersplugin","frequentspammerplugin","hash","jabber","argumenterror","bytestreams","ibb","ibbinitiator","ibbqueueitem","ibbtarget","iqquerybytestreams","iqsi","iqsifile","iqsifilerange","socks5bytestreams","socks5bytestreamsinitiator","socks5bytestreamspeer","socks5bytestreamsserver","socks5bytestreamsserverstreamhost","socks5bytestreamstarget","socks5socket","streamhost","streamhostused","callback","callbacklist","caps","c","helper","client","clientauthenticationfailure","command","iqcommand","responder","component","componentauthenticationfailure","connection","dataforms","xdata","xdatafield","xdatainstructions","xdatareported","xdatatitle","delay","xdelay","discovery","feature","identity","iqquerydiscoinfo","iqquerydiscoitems","item","responder","errorresponse","featurenegotiation","iqfeature","filetransfer","filesource","helper","transfersource","framework","base","bot","httpbinding","client","idgenerator","iq","iqquery","jid","jabbererror","muc","iqquerymucadmin","iqquerymucadminitem","iqquerymucowner","mucbrowser","mucclient","simplemucclient","useritem","xmuc","xmucuser","xmucuserinvite","xmucuseritem","message","nonamexmlnsregistered","presence","pubsub","configuration","event","eventitem","eventitems","iqpubsub","iqpubsubowner","item","items","nodebrowser","nodeconfig","nodehelper","ownernodeconfig","publish","servicehelper","subscription","subscriptionconfig","unsubscribe","rpc","client","iqqueryrpc","server","roster","helper","rosteritem","iqqueryroster","rosteritem","rosterx","rosterxitem","xroster","xrosteritem","sasl","anonymous","base","digestmd5","plain","socks5error","semaphore","simple","stream","threadblock","streamparser","usertune","helper","tune","vcard","helper","iqvcard","version","iqqueryversion","responder","simpleresponder","x","xhtml","body","html","xmppelement","xmppstanza","xparent","messagethrottlecounterplugin","pathname","pidify","rexml","element","iosource","sendmailblacklistplugin","spoofedfromaddressplugin","syslogremoteplugin","testplugin","time","xmlrpc","create","<=>()","<=>()","==()","==()","[]()","[]()","[]()","[]=()","accept()","accept()","accept()","accept_features()","accept_subscription()","accept_subscription_from?()","accept_subscriptions=()","accept_subscriptions?()","action()","action()","action=()","action=()","actions()","activate()","activate=()","activate_plugins()","active?()","active?()","actors()","actors=()","add()","add()","add()","add_address()","add_cap()","add_commands_disco_callback()","add_commands_exec_callback()","add_event_callback()","add_feature()","add_features()","add_incoming_callback()","add_iq_callback()","add_join_callback()","add_leave_callback()","add_message_callback()","add_message_callback()","add_one()","add_pep_notification()","add_presence()","add_presence_callback()","add_presence_callback()","add_presence_callback()","add_private_message_callback()","add_query_callback()","add_stanza_callback()","add_streamhost()","add_streamhost_callback()","add_subscription_callback()","add_subscription_request_callback()","add_update_callback()","add_usertune_callback()","add_version_callback()","add_xml_callback()","affiliation()","affiliation=()","after_reopen()","answer()","answer()","artist()","ask()","ask=()","auth()","auth()","auth()","auth()","auth()","auth()","auth_anonymous()","auth_anonymous_sasl()","auth_nonsasl()","auth_sasl()","backward()","ban()","bare()","bare!()","bared?()","body()","body()","body=()","body=()","c()","call()","call()","call2()","can_range?()","can_range?()","cancel_subscription()","category()","category()","category=()","check_for_offenders()","class_for_name_xmlns()","clean_old_addrs()","clean_old_data()","client()","clone()","close()","close()","close()","close()","close()","close()","close!()","close!()","cmp_interest()","code()","code=()","command()","configure()","connect()","connect()","connect()","connect()","connect_domain()","connected?()","contacts()","contents=()","continue()","continue()","continue=()","continue=()","create_collection_node()","create_node()","create_node()","current_day()","current_line()","current_month()","daemonize()","data()","data_file()","date()","date()","date()","date=()","debug()","debug=()","debug?()","debug_message()","debug_message()","debuglog()","decline()","decline_subscription()","decode64()","decode_challenge()","delete()","delete_elements()","delete_iq_callback()","delete_message_callback()","delete_node()","delete_node()","delete_pid()","delete_presence_callback()","delete_stanza_callback()","delete_xml_callback()","deliver()","deliver_deferred()","demote()","description()","description=()","disconnect()","do_rpc()","do_subscribe()","do_unsubscribe()","domain()","domain=()","each()","each_presence()","each_streamhost()","empty?()","encode64()","ensure_emails_are_sent?()","ensure_one_pending_request()","eql?()","error()","error()","error=()","error_message()","error_message()","escape()","event_type?()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_line()","every_minute()","every_minute()","every_minute()","every_second()","exit()","feature()","features()","field()","fields()","fields()","file()","filename()","filename()","find()","find_by_group()","first_element()","first_element_text()","flush()","flush()","fname()","fname=()","force_xmlns()","force_xmlns?()","form()","form=()","form_type()","forward()","from()","from()","from()","from=()","from=()","from=()","from_room?()","generate_caps()","generate_id()","generate_id()","generate_item()","generate_ver()","generate_ver_from_discoinfo()","generate_ver_str()","get()","get()","get_mx_server()","get_affiliations()","get_affiliations()","get_all_items()","get_config_from()","get_configuration()","get_info()","get_items()","get_items_from()","get_metadata()","get_node()","get_node()","get_node()","get_node()","get_node()","get_node()","get_node()","get_options_from()","get_response()","get_room_configuration()","get_subscribers()","get_subscribers_from()","get_subscriptions()","get_subscriptions_from()","get_subscriptions_from_all_nodes()","groups()","groups()","groups()","groups=()","groups=()","handle_discoinfo_query()","handle_iq()","hash()","hash()","hash()","hash=()","helper()","host()","host=()","id()","id()","id()","id=()","id=()","id=()","identities()","identity()","import()","import()","import()","iname()","iname()","iname()","iname()","iname()","iname=()","iname=()","iname=()","iname=()","iname=()","info_message()","info_message()","info_message()","inspect()","instructions()","instructions()","instructions=()","invite()","iq_callback()","iq_callback()","is_connected?()","is_disconnected?()","is_tls?()","items()","items()","items()","items()","jid()","jid()","jid()","jid()","jid()","jid()","jid()","jid()","jid()","jid=()","jid=()","jid=()","jid=()","jid=()","jid=()","jid=()","jid=()","jid=()","join()","key_strings_to_symbols!()","kick()","label()","label=()","length()","length()","length()","length=()","length=()","length=()","load_config()","load_my_options()","logger()","logger=()","mark_time()","max_items()","max_items=()","md5()","methodcall()","methodresponse()","method_missing()","mime()","mime()","mime_type()","mime_type=()","mode()","mode=()","most_recent_file()","muc_name()","muc_rooms()","multicall()","multicall2()","name_xmlns()","name_xmlns_for_class()","need_approval?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_authset()","new_authset_digest()","new_browseget()","new_query()","new_register()","new_registerget()","new_rosterget()","new_rosterset()","new_subscriptions()","new_subscriptions?()","nick()","nick()","nick=()","nick=()","node()","node()","node()","node()","node()","node()","node()","node()","node()","node()","node()","node=()","node=()","node=()","node=()","node=()","node=()","node=()","node=()","node=()","nodes()","nodes_names()","normalize()","now_playing()","offer()","offset()","offset=()","on_exception()","on_join()","on_leave()","on_message()","on_private_message()","on_room_message()","on_self_leave()","on_subject()","on_unhandled_iq()","online?()","open()","open()","open()","options()","options()","options=()","options=()","options_for()","os()","os=()","owner?()","parent=()","parse()","parse_failure()","parser_end()","password()","password=()","password=()","payload()","payload=()","peer_sock()","photo_binval()","pid()","pid_directory()","pid_directory=()","pid_end()","pid_exists?()","pid_file()","playing?()","port()","port=()","position()","presence()","presence_updates()","presence_updates?()","priority()","priority=()","process()","profile()","profile=()","promote()","publish_content()","publish_item_to()","publish_item_with_id_to()","pubsub()","purge_items()","purge_items_from()","query()","query=()","query_streamhost()","queryns()","raise()","range()","rating()","read()","read()","read()","read()","read_data()","reason()","reason()","reason=()","reason=()","receive()","receive_iq()","received_messages()","received_messages?()","recent_file()","reconnect()","register()","register_info()","register_plugins()","remove()","remove()","remove_registration()","replace_element_text()","required=()","required?()","reset_data()","resource()","resource=()","role()","role=()","room()","roster()","run()","run_test()","running?()","save_pid()","say()","seek()","seek()","send()","send()","send()","send()","send!()","send_affiliations()","send_buffered_emails()","send_data()","send_email()","send_email()","send_email_buffered()","send_im()","send_im()","send_message()","send_message_xhtml()","send_with_id()","sessionid()","sessionid=()","set()","set()","set_action()","set_actors()","set_affiliation()","set_body()","set_body()","set_category()","set_code()","set_config_for()","set_configuration()","set_contents()","set_continue()","set_continue()","set_error()","set_from()","set_from()","set_from()","set_id()","set_iname()","set_iname()","set_iname()","set_jid()","set_jid()","set_nick()","set_node()","set_node()","set_node()","set_node()","set_options_for()","set_os()","set_presence()","set_priority()","set_reason()","set_reason()","set_role()","set_sessionid()","set_show()","set_stamp()","set_status()","set_status()","set_subject()","set_text()","set_thread()","set_to()","set_to()","set_type()","set_type()","set_type()","set_type()","set_type()","set_type()","set_var()","set_version()","set_xml_lang()","show()","show=()","show_config()","shut_down()","shut_down()","shut_down()","sid()","sid=()","signal()","signal()","signal()","signal()","signal()","signal()","signal()","since()","since()","size()","size()","size()","size=()","smtp_command()","smtp_connect()","source()","stamp()","stamp=()","start()","start()","start()","start()","start()","start()","start()","start_as_daemon()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","start_up()","starttls()","state()","state=()","status()","status()","status()","status=()","status=()","status_code()","stop()","stop()","stop_playing()","streamhost_used()","strip()","strip!()","stripped?()","subid()","subid()","subid()","subid=()","subid=()","subid=()","subject()","subject()","subject=()","subject=()","submit_room_configuration()","subscribe()","subscribe_to()","subscribed_to?()","subscription()","subscription()","subscription=()","subscription_requests()","supports_anonymous?()","tail()","tail()","text()","text=()","thread()","thread=()","time_at_mark()","time_since_mark()","title()","title()","title()","title=()","to()","to()","to=()","to=()","to_a()","to_s()","to_s()","to_s()","to_s()","to_text()","track()","type()","type()","type()","type()","type()","type()","type()","type()","type()","type=()","type=()","type=()","type=()","type=()","type=()","type=()","type=()","typed_add()","typed_add()","typed_add()","unban()","unsubscribe()","unsubscribe_from()","uri()","user_by_message_id()","user_by_session_id()","user_by_session_id()","validate_address()","value()","value=()","values()","values=()","var()","var()","var=()","var=()","vcard()","ver()","ver()","version()","version=()","wait()","wait()","wait_for_roster()","wakeup()","warning_message()","warning_message()","write()","write()","write_data()","write_status()","x()","x()","xml_lang()","xml_lang=()","zeroconf()","zeroconf=()","cgmonitor"],"longSearchIndex":["activeblacklistplugin","atmailplugin","base64","blacklistplugin","cgmonitor","cgmonitor::monitor","cgmonitor::plugin","cgpclamavcrash","cgpmcafeecounter","cgpmcafeesparkwatcher","cgpspamcatchercounter","cgpspamcatcherrestart","checksize","corruptedmailbox","emailstats","file","file::tail","file::tail::breakexception","file::tail::deletedexception","file::tail::logfile","file::tail::reopenexception","file::tail::returnexception","file::tail::tailexception","frequentsendersplugin","frequentspammerplugin","hash","jabber","jabber::argumenterror","jabber::bytestreams","jabber::bytestreams::ibb","jabber::bytestreams::ibbinitiator","jabber::bytestreams::ibbqueueitem","jabber::bytestreams::ibbtarget","jabber::bytestreams::iqquerybytestreams","jabber::bytestreams::iqsi","jabber::bytestreams::iqsifile","jabber::bytestreams::iqsifilerange","jabber::bytestreams::socks5bytestreams","jabber::bytestreams::socks5bytestreamsinitiator","jabber::bytestreams::socks5bytestreamspeer","jabber::bytestreams::socks5bytestreamsserver","jabber::bytestreams::socks5bytestreamsserverstreamhost","jabber::bytestreams::socks5bytestreamstarget","jabber::bytestreams::socks5socket","jabber::bytestreams::streamhost","jabber::bytestreams::streamhostused","jabber::callback","jabber::callbacklist","jabber::caps","jabber::caps::c","jabber::caps::helper","jabber::client","jabber::clientauthenticationfailure","jabber::command","jabber::command::iqcommand","jabber::command::responder","jabber::component","jabber::componentauthenticationfailure","jabber::connection","jabber::dataforms","jabber::dataforms::xdata","jabber::dataforms::xdatafield","jabber::dataforms::xdatainstructions","jabber::dataforms::xdatareported","jabber::dataforms::xdatatitle","jabber::delay","jabber::delay::xdelay","jabber::discovery","jabber::discovery::feature","jabber::discovery::identity","jabber::discovery::iqquerydiscoinfo","jabber::discovery::iqquerydiscoitems","jabber::discovery::item","jabber::discovery::responder","jabber::errorresponse","jabber::featurenegotiation","jabber::featurenegotiation::iqfeature","jabber::filetransfer","jabber::filetransfer::filesource","jabber::filetransfer::helper","jabber::filetransfer::transfersource","jabber::framework","jabber::framework::base","jabber::framework::bot","jabber::httpbinding","jabber::httpbinding::client","jabber::idgenerator","jabber::iq","jabber::iqquery","jabber::jid","jabber::jabbererror","jabber::muc","jabber::muc::iqquerymucadmin","jabber::muc::iqquerymucadminitem","jabber::muc::iqquerymucowner","jabber::muc::mucbrowser","jabber::muc::mucclient","jabber::muc::simplemucclient","jabber::muc::useritem","jabber::muc::xmuc","jabber::muc::xmucuser","jabber::muc::xmucuserinvite","jabber::muc::xmucuseritem","jabber::message","jabber::nonamexmlnsregistered","jabber::presence","jabber::pubsub","jabber::pubsub::configuration","jabber::pubsub::event","jabber::pubsub::eventitem","jabber::pubsub::eventitems","jabber::pubsub::iqpubsub","jabber::pubsub::iqpubsubowner","jabber::pubsub::item","jabber::pubsub::items","jabber::pubsub::nodebrowser","jabber::pubsub::nodeconfig","jabber::pubsub::nodehelper","jabber::pubsub::ownernodeconfig","jabber::pubsub::publish","jabber::pubsub::servicehelper","jabber::pubsub::subscription","jabber::pubsub::subscriptionconfig","jabber::pubsub::unsubscribe","jabber::rpc","jabber::rpc::client","jabber::rpc::iqqueryrpc","jabber::rpc::server","jabber::roster","jabber::roster::helper","jabber::roster::helper::rosteritem","jabber::roster::iqqueryroster","jabber::roster::rosteritem","jabber::roster::rosterx","jabber::roster::rosterxitem","jabber::roster::xroster","jabber::roster::xrosteritem","jabber::sasl","jabber::sasl::anonymous","jabber::sasl::base","jabber::sasl::digestmd5","jabber::sasl::plain","jabber::socks5error","jabber::semaphore","jabber::simple","jabber::stream","jabber::stream::threadblock","jabber::streamparser","jabber::usertune","jabber::usertune::helper","jabber::usertune::tune","jabber::vcard","jabber::vcard::helper","jabber::vcard::iqvcard","jabber::version","jabber::version::iqqueryversion","jabber::version::responder","jabber::version::simpleresponder","jabber::x","jabber::xhtml","jabber::xhtml::body","jabber::xhtml::html","jabber::xmppelement","jabber::xmppstanza","jabber::xparent","messagethrottlecounterplugin","pathname","pidify","rexml","rexml::element","rexml::iosource","sendmailblacklistplugin","spoofedfromaddressplugin","syslogremoteplugin","testplugin","time","xmlrpc","xmlrpc::create","jabber::jid#<=>()","jabber::presence#<=>()","jabber::jid#==()","rexml::element#==()","jabber::roster::helper#[]()","jabber::roster::iqqueryroster#[]()","jabber::vcard::iqvcard#[]()","jabber::vcard::iqvcard#[]=()","jabber::bytestreams::ibbtarget#accept()","jabber::bytestreams::socks5bytestreamstarget#accept()","jabber::filetransfer::helper#accept()","jabber::connection#accept_features()","jabber::roster::helper#accept_subscription()","jabber::framework::bot#accept_subscription_from?()","jabber::simple#accept_subscriptions=()","jabber::simple#accept_subscriptions?()","jabber::command::iqcommand#action()","jabber::roster::xrosteritem#action()","jabber::command::iqcommand#action=()","jabber::roster::xrosteritem#action=()","jabber::command::iqcommand#actions()","jabber::bytestreams::iqquerybytestreams#activate()","jabber::bytestreams::iqquerybytestreams#activate=()","cgmonitor::monitor#activate_plugins()","jabber::bytestreams::ibb#active?()","jabber::muc::mucclient#active?()","jabber::muc::useritem#actors()","jabber::muc::useritem#actors=()","jabber::callbacklist#add()","jabber::roster::helper#add()","jabber::simple#add()","jabber::bytestreams::socks5bytestreamsserver#add_address()","jabber::framework::bot#add_cap()","jabber::command::responder#add_commands_disco_callback()","jabber::command::responder#add_commands_exec_callback()","jabber::pubsub::servicehelper#add_event_callback()","jabber::discovery::responder#add_feature()","jabber::discovery::responder#add_features()","jabber::filetransfer::helper#add_incoming_callback()","jabber::stream#add_iq_callback()","jabber::muc::mucclient#add_join_callback()","jabber::muc::mucclient#add_leave_callback()","jabber::muc::mucclient#add_message_callback()","jabber::stream#add_message_callback()","emailstats#add_one()","jabber::framework::bot#add_pep_notification()","jabber::roster::helper::rosteritem#add_presence()","jabber::muc::mucclient#add_presence_callback()","jabber::roster::helper#add_presence_callback()","jabber::stream#add_presence_callback()","jabber::muc::mucclient#add_private_message_callback()","jabber::roster::helper#add_query_callback()","jabber::stream#add_stanza_callback()","jabber::bytestreams::socks5bytestreamsinitiator#add_streamhost()","jabber::bytestreams::socks5bytestreams#add_streamhost_callback()","jabber::roster::helper#add_subscription_callback()","jabber::roster::helper#add_subscription_request_callback()","jabber::roster::helper#add_update_callback()","jabber::usertune::helper#add_usertune_callback()","jabber::version::responder#add_version_callback()","jabber::stream#add_xml_callback()","jabber::muc::useritem#affiliation()","jabber::muc::useritem#affiliation=()","file::tail#after_reopen()","jabber::xmppstanza#answer()","jabber::xmppstanza::answer()","jabber::usertune::tune#artist()","jabber::roster::rosteritem#ask()","jabber::roster::rosteritem#ask=()","jabber::bytestreams::socks5socket#auth()","jabber::client#auth()","jabber::component#auth()","jabber::sasl::anonymous#auth()","jabber::sasl::digestmd5#auth()","jabber::sasl::plain#auth()","jabber::client#auth_anonymous()","jabber::client#auth_anonymous_sasl()","jabber::client#auth_nonsasl()","jabber::client#auth_sasl()","file::tail#backward()","jabber::muc::simplemucclient#ban()","jabber::jid#bare()","jabber::jid#bare!()","jabber::jid#bared?()","jabber::message#body()","jabber::xhtml::html#body()","jabber::message#body=()","jabber::xhtml::html#body=()","jabber::caps::helper#c()","jabber::rpc::client#call()","jabber::stream::threadblock#call()","jabber::rpc::client#call2()","jabber::filetransfer::filesource#can_range?()","jabber::filetransfer::transfersource#can_range?()","jabber::roster::helper::rosteritem#cancel_subscription()","jabber::discovery::identity#category()","jabber::pubsub::nodebrowser#category()","jabber::discovery::identity#category=()","frequentspammerplugin#check_for_offenders()","jabber::xmppelement::class_for_name_xmlns()","frequentspammerplugin#clean_old_addrs()","emailstats#clean_old_data()","jabber::simple#client()","jabber::xmppelement#clone()","jabber::bytestreams::ibb#close()","jabber::bytestreams::socks5bytestreams#close()","jabber::client#close()","jabber::component#close()","jabber::httpbinding::client#close()","jabber::stream#close()","jabber::connection#close!()","jabber::stream#close!()","jabber::presence#cmp_interest()","jabber::errorresponse#code()","jabber::errorresponse#code=()","jabber::iq#command()","jabber::muc::mucclient#configure()","jabber::client#connect()","jabber::component#connect()","jabber::connection#connect()","jabber::httpbinding::client#connect()","jabber::bytestreams::socks5socket#connect_domain()","jabber::simple#connected?()","jabber::simple#contacts()","jabber::xhtml::html#contents=()","jabber::muc::useritem#continue()","jabber::muc::xmucuseritem#continue()","jabber::muc::useritem#continue=()","jabber::muc::xmucuseritem#continue=()","jabber::pubsub::servicehelper#create_collection_node()","jabber::pubsub::nodehelper#create_node()","jabber::pubsub::servicehelper#create_node()","emailstats#current_day()","rexml::iosource#current_line()","emailstats#current_month()","pidify::daemonize()","jabber::bytestreams::ibbqueueitem#data()","emailstats#data_file()","jabber::bytestreams::iqsifile#date()","jabber::filetransfer::filesource#date()","jabber::filetransfer::transfersource#date()","jabber::bytestreams::iqsifile#date=()","jabber::debug()","jabber::debug=()","cgmonitor::monitor#debug?()","cgmonitor::monitor#debug_message()","cgmonitor::plugin#debug_message()","jabber::debuglog()","jabber::filetransfer::helper#decline()","jabber::roster::helper#decline_subscription()","base64::decode64()","jabber::sasl::digestmd5#decode_challenge()","jabber::callbacklist#delete()","rexml::element#delete_elements()","jabber::stream#delete_iq_callback()","jabber::stream#delete_message_callback()","jabber::pubsub::nodehelper#delete_node()","jabber::pubsub::servicehelper#delete_node()","pidify::delete_pid()","jabber::stream#delete_presence_callback()","jabber::stream#delete_stanza_callback()","jabber::stream#delete_xml_callback()","jabber::simple#deliver()","jabber::simple#deliver_deferred()","jabber::muc::simplemucclient#demote()","jabber::bytestreams::iqsifile#description()","jabber::bytestreams::iqsifile#description=()","jabber::simple#disconnect()","jabber::rpc::client#do_rpc()","jabber::pubsub::nodehelper#do_subscribe()","jabber::pubsub::nodehelper#do_unsubscribe()","jabber::jid#domain()","jabber::jid#domain=()","jabber::roster::iqqueryroster#each()","jabber::roster::helper::rosteritem#each_presence()","jabber::bytestreams::socks5bytestreamsserver#each_streamhost()","jabber::jid#empty?()","base64::encode64()","cgmonitor::plugin#ensure_emails_are_sent?()","jabber::httpbinding::client#ensure_one_pending_request()","jabber::jid#eql?()","jabber::errorresponse#error()","jabber::xmppstanza#error()","jabber::errorresponse#error=()","cgmonitor::monitor#error_message()","cgmonitor::plugin#error_message()","jabber::jid::escape()","jabber::pubsub::event#event_type?()","activeblacklistplugin#every_line()","atmailplugin#every_line()","blacklistplugin#every_line()","cgpclamavcrash#every_line()","cgpmcafeecounter#every_line()","cgpmcafeesparkwatcher#every_line()","cgpspamcatchercounter#every_line()","cgpspamcatcherrestart#every_line()","corruptedmailbox#every_line()","emailstats#every_line()","frequentsendersplugin#every_line()","frequentspammerplugin#every_line()","messagethrottlecounterplugin#every_line()","sendmailblacklistplugin#every_line()","spoofedfromaddressplugin#every_line()","syslogremoteplugin#every_line()","testplugin#every_line()","activeblacklistplugin#every_minute()","frequentspammerplugin#every_minute()","testplugin#every_minute()","checksize#every_second()","jabber::muc::mucclient#exit()","jabber::bytestreams::iqsi#feature()","jabber::discovery::iqquerydiscoinfo#features()","jabber::dataforms::xdata#field()","jabber::dataforms::xdata#fields()","jabber::vcard::iqvcard#fields()","jabber::bytestreams::iqsi#file()","jabber::filetransfer::filesource#filename()","jabber::filetransfer::transfersource#filename()","jabber::roster::helper#find()","jabber::roster::helper#find_by_group()","rexml::element#first_element()","rexml::element#first_element_text()","jabber::bytestreams::ibb#flush()","jabber::bytestreams::socks5bytestreams#flush()","jabber::bytestreams::iqsifile#fname()","jabber::bytestreams::iqsifile#fname=()","jabber::xmppelement::force_xmlns()","jabber::xmppelement::force_xmlns?()","jabber::pubsub::configuration#form()","jabber::pubsub::configuration#form=()","jabber::pubsub::configuration#form_type()","file::tail#forward()","jabber::delay::xdelay#from()","jabber::muc::xmucuserinvite#from()","jabber::xmppstanza#from()","jabber::delay::xdelay#from=()","jabber::muc::xmucuserinvite#from=()","jabber::xmppstanza#from=()","jabber::muc::mucclient#from_room?()","jabber::discovery::responder#generate_caps()","jabber::idgenerator::generate_id()","jabber::idgenerator#generate_id()","jabber::discovery::responder#generate_item()","jabber::caps::generate_ver()","jabber::caps::generate_ver_from_discoinfo()","jabber::caps::generate_ver_str()","jabber::vcard::helper#get()","jabber::vcard::helper::get()","activeblacklistplugin#get_mx_server()","jabber::pubsub::nodehelper#get_affiliations()","jabber::pubsub::servicehelper#get_affiliations()","jabber::pubsub::nodehelper#get_all_items()","jabber::pubsub::servicehelper#get_config_from()","jabber::pubsub::nodehelper#get_configuration()","jabber::pubsub::nodebrowser#get_info()","jabber::pubsub::nodehelper#get_items()","jabber::pubsub::servicehelper#get_items_from()","jabber::pubsub::nodebrowser#get_metadata()","cgmonitor::plugin#get_node()","cgpclamavcrash#get_node()","cgpmcafeecounter#get_node()","cgpmcafeesparkwatcher#get_node()","cgpspamcatchercounter#get_node()","corruptedmailbox#get_node()","syslogremoteplugin#get_node()","jabber::pubsub::servicehelper#get_options_from()","activeblacklistplugin#get_response()","jabber::muc::mucclient#get_room_configuration()","jabber::pubsub::nodehelper#get_subscribers()","jabber::pubsub::servicehelper#get_subscribers_from()","jabber::pubsub::nodehelper#get_subscriptions()","jabber::pubsub::servicehelper#get_subscriptions_from()","jabber::pubsub::servicehelper#get_subscriptions_from_all_nodes()","jabber::roster::helper#groups()","jabber::roster::rosteritem#groups()","jabber::roster::xrosteritem#groups()","jabber::roster::rosteritem#groups=()","jabber::roster::xrosteritem#groups=()","jabber::caps::helper#handle_discoinfo_query()","jabber::rpc::server#handle_iq()","jabber::bytestreams::iqsifile#hash()","jabber::caps::c#hash()","jabber::jid#hash()","jabber::bytestreams::iqsifile#hash=()","jabber::framework::base::helper()","jabber::bytestreams::streamhost#host()","jabber::bytestreams::streamhost#host=()","jabber::bytestreams::iqsi#id()","jabber::pubsub::item#id()","jabber::xmppstanza#id()","jabber::bytestreams::iqsi#id=()","jabber::pubsub::item#id=()","jabber::xmppstanza#id=()","jabber::discovery::iqquerydiscoinfo#identities()","jabber::discovery::iqquerydiscoinfo#identity()","jabber::xmppelement::import()","rexml::element::import()","rexml::element#import()","jabber::discovery::identity#iname()","jabber::discovery::item#iname()","jabber::roster::rosteritem#iname()","jabber::roster::xrosteritem#iname()","jabber::version::iqqueryversion#iname()","jabber::discovery::identity#iname=()","jabber::discovery::item#iname=()","jabber::roster::rosteritem#iname=()","jabber::roster::xrosteritem#iname=()","jabber::version::iqqueryversion#iname=()","cgmonitor::info_message()","cgmonitor::monitor#info_message()","cgmonitor::plugin#info_message()","jabber::roster::iqqueryroster#inspect()","jabber::dataforms::xdata#instructions()","jabber::dataforms::xdatainstructions#instructions()","jabber::dataforms::xdata#instructions=()","jabber::muc::simplemucclient#invite()","jabber::command::responder#iq_callback()","jabber::version::responder#iq_callback()","jabber::stream#is_connected?()","jabber::stream#is_disconnected?()","jabber::connection#is_tls?()","jabber::discovery::iqquerydiscoitems#items()","jabber::muc::iqquerymucadmin#items()","jabber::muc::xmucuser#items()","jabber::pubsub::nodebrowser#items()","jabber::bytestreams::streamhost#jid()","jabber::bytestreams::streamhostused#jid()","jabber::discovery::item#jid()","jabber::muc::useritem#jid()","jabber::pubsub::subscription#jid()","jabber::pubsub::subscriptionconfig#jid()","jabber::pubsub::unsubscribe#jid()","jabber::roster::rosteritem#jid()","jabber::roster::xrosteritem#jid()","jabber::bytestreams::streamhost#jid=()","jabber::bytestreams::streamhostused#jid=()","jabber::discovery::item#jid=()","jabber::muc::useritem#jid=()","jabber::pubsub::subscription#jid=()","jabber::pubsub::subscriptionconfig#jid=()","jabber::pubsub::unsubscribe#jid=()","jabber::roster::rosteritem#jid=()","jabber::roster::xrosteritem#jid=()","jabber::muc::mucclient#join()","hash#key_strings_to_symbols!()","jabber::muc::simplemucclient#kick()","jabber::dataforms::xdatafield#label()","jabber::dataforms::xdatafield#label=()","jabber::bytestreams::iqsifilerange#length()","jabber::callbacklist#length()","jabber::usertune::tune#length()","jabber::bytestreams::iqsifilerange#length=()","jabber::filetransfer::filesource#length=()","jabber::filetransfer::transfersource#length=()","cgmonitor::monitor#load_config()","cgmonitor::plugin#load_my_options()","jabber::logger()","jabber::logger=()","cgmonitor::plugin#mark_time()","jabber::pubsub::items#max_items()","jabber::pubsub::items#max_items=()","jabber::filetransfer::transfersource#md5()","xmlrpc::create#methodcall()","xmlrpc::create#methodresponse()","jabber::rpc::client#method_missing()","jabber::filetransfer::filesource#mime()","jabber::filetransfer::transfersource#mime()","jabber::bytestreams::iqsi#mime_type()","jabber::bytestreams::iqsi#mime_type=()","jabber::bytestreams::iqquerybytestreams#mode()","jabber::bytestreams::iqquerybytestreams#mode=()","pathname#most_recent_file()","jabber::muc::mucbrowser#muc_name()","jabber::muc::mucbrowser#muc_rooms()","jabber::rpc::client#multicall()","jabber::rpc::client#multicall2()","jabber::xmppelement::name_xmlns()","jabber::xmppelement::name_xmlns_for_class()","jabber::pubsub::subscription#need_approval?()","cgmonitor::monitor::new()","cgmonitor::plugin::new()","file::tail::reopenexception::new()","jabber::bytestreams::ibb::new()","jabber::bytestreams::ibbqueueitem::new()","jabber::bytestreams::ibbtarget::new()","jabber::bytestreams::iqquerybytestreams::new()","jabber::bytestreams::iqsi::new()","jabber::bytestreams::iqsifile::new()","jabber::bytestreams::iqsifilerange::new()","jabber::bytestreams::socks5bytestreams::new()","jabber::bytestreams::socks5bytestreamsinitiator::new()","jabber::bytestreams::socks5bytestreamspeer::new()","jabber::bytestreams::socks5bytestreamsserver::new()","jabber::bytestreams::socks5bytestreamsserverstreamhost::new()","jabber::bytestreams::socks5bytestreamstarget::new()","jabber::bytestreams::socks5socket::new()","jabber::bytestreams::streamhost::new()","jabber::bytestreams::streamhostused::new()","jabber::callback::new()","jabber::callbacklist::new()","jabber::caps::c::new()","jabber::caps::helper::new()","jabber::client::new()","jabber::command::iqcommand::new()","jabber::command::responder::new()","jabber::component::new()","jabber::connection::new()","jabber::dataforms::xdata::new()","jabber::dataforms::xdatafield::new()","jabber::dataforms::xdatainstructions::new()","jabber::dataforms::xdatatitle::new()","jabber::delay::xdelay::new()","jabber::discovery::feature::new()","jabber::discovery::identity::new()","jabber::discovery::item::new()","jabber::discovery::responder::new()","jabber::errorresponse::new()","jabber::filetransfer::filesource::new()","jabber::filetransfer::helper::new()","jabber::framework::base::new()","jabber::framework::bot::new()","jabber::httpbinding::client::new()","jabber::idgenerator::new()","jabber::iq::new()","jabber::jid::new()","jabber::muc::iqquerymucadminitem::new()","jabber::muc::mucbrowser::new()","jabber::muc::mucclient::new()","jabber::muc::simplemucclient::new()","jabber::muc::xmucuserinvite::new()","jabber::muc::xmucuseritem::new()","jabber::message::new()","jabber::nonamexmlnsregistered::new()","jabber::presence::new()","jabber::pubsub::item::new()","jabber::pubsub::nodebrowser::new()","jabber::pubsub::nodeconfig::new()","jabber::pubsub::nodehelper::new()","jabber::pubsub::servicehelper::new()","jabber::pubsub::subscription::new()","jabber::pubsub::subscriptionconfig::new()","jabber::pubsub::unsubscribe::new()","jabber::rpc::client::new()","jabber::rpc::server::new()","jabber::roster::helper::new()","jabber::roster::helper::rosteritem::new()","jabber::roster::rosteritem::new()","jabber::roster::xrosteritem::new()","jabber::sasl::new()","jabber::sasl::base::new()","jabber::sasl::digestmd5::new()","jabber::semaphore::new()","jabber::simple::new()","jabber::stream::new()","jabber::stream::threadblock::new()","jabber::streamparser::new()","jabber::usertune::tune::new()","jabber::vcard::helper::new()","jabber::vcard::iqvcard::new()","jabber::version::iqqueryversion::new()","jabber::version::responder::new()","jabber::version::simpleresponder::new()","jabber::xhtml::html::new()","jabber::xmppelement::new()","jabber::iq::new_authset()","jabber::iq::new_authset_digest()","jabber::iq::new_browseget()","jabber::iq::new_query()","jabber::iq::new_register()","jabber::iq::new_registerget()","jabber::iq::new_rosterget()","jabber::iq::new_rosterset()","jabber::simple#new_subscriptions()","jabber::simple#new_subscriptions?()","jabber::muc::mucclient#nick()","jabber::muc::useritem#nick()","jabber::muc::mucclient#nick=()","jabber::muc::useritem#nick=()","jabber::caps::c#node()","jabber::command::iqcommand#node()","jabber::discovery::iqquerydiscoinfo#node()","jabber::discovery::iqquerydiscoitems#node()","jabber::discovery::item#node()","jabber::jid#node()","jabber::pubsub::configuration#node()","jabber::pubsub::items#node()","jabber::pubsub::publish#node()","jabber::pubsub::subscription#node()","jabber::pubsub::unsubscribe#node()","jabber::command::iqcommand#node=()","jabber::discovery::iqquerydiscoinfo#node=()","jabber::discovery::iqquerydiscoitems#node=()","jabber::discovery::item#node=()","jabber::jid#node=()","jabber::pubsub::configuration#node=()","jabber::pubsub::items#node=()","jabber::pubsub::subscription#node=()","jabber::pubsub::unsubscribe#node=()","jabber::pubsub::nodebrowser#nodes()","jabber::pubsub::nodebrowser#nodes_names()","jabber::xmppstanza#normalize()","jabber::usertune::helper#now_playing()","jabber::filetransfer::helper#offer()","jabber::bytestreams::iqsifilerange#offset()","jabber::bytestreams::iqsifilerange#offset=()","jabber::stream#on_exception()","jabber::muc::simplemucclient#on_join()","jabber::muc::simplemucclient#on_leave()","jabber::muc::simplemucclient#on_message()","jabber::muc::simplemucclient#on_private_message()","jabber::muc::simplemucclient#on_room_message()","jabber::muc::simplemucclient#on_self_leave()","jabber::muc::simplemucclient#on_subject()","jabber::framework::base#on_unhandled_iq()","jabber::roster::helper::rosteritem#online?()","file::tail::logfile::open()","jabber::bytestreams::ibbinitiator#open()","jabber::bytestreams::socks5bytestreamsinitiator#open()","jabber::dataforms::xdatafield#options()","jabber::pubsub::configuration#options()","jabber::dataforms::xdatafield#options=()","jabber::pubsub::configuration#options=()","cgmonitor::monitor#options_for()","jabber::version::iqqueryversion#os()","jabber::version::iqqueryversion#os=()","jabber::muc::mucclient#owner?()","jabber::xmppelement#parent=()","jabber::streamparser#parse()","jabber::stream#parse_failure()","jabber::stream#parser_end()","jabber::muc::xmuc#password()","jabber::client#password=()","jabber::muc::xmuc#password=()","jabber::pubsub::event#payload()","jabber::pubsub::event#payload=()","jabber::bytestreams::socks5bytestreamsserver#peer_sock()","jabber::vcard::iqvcard#photo_binval()","pidify::pid()","pidify::pid_directory()","pidify::pid_directory=()","pidify::pid_end()","pidify::pid_exists?()","pidify::pid_file()","jabber::usertune::tune#playing?()","jabber::bytestreams::streamhost#port()","jabber::bytestreams::streamhost#port=()","rexml::iosource#position()","jabber::roster::helper::rosteritem#presence()","jabber::simple#presence_updates()","jabber::simple#presence_updates?()","jabber::presence#priority()","jabber::presence#priority=()","jabber::callbacklist#process()","jabber::bytestreams::iqsi#profile()","jabber::bytestreams::iqsi#profile=()","jabber::muc::simplemucclient#promote()","jabber::pubsub::nodehelper#publish_content()","jabber::pubsub::servicehelper#publish_item_to()","jabber::pubsub::servicehelper#publish_item_with_id_to()","jabber::iq#pubsub()","jabber::pubsub::nodehelper#purge_items()","jabber::pubsub::servicehelper#purge_items_from()","jabber::iq#query()","jabber::iq#query=()","jabber::bytestreams::socks5bytestreams::query_streamhost()","jabber::iq#queryns()","jabber::stream::threadblock#raise()","jabber::bytestreams::iqsifile#range()","jabber::usertune::tune#rating()","jabber::bytestreams::ibb#read()","jabber::bytestreams::socks5bytestreams#read()","jabber::filetransfer::filesource#read()","jabber::filetransfer::transfersource#read()","emailstats#read_data()","jabber::muc::useritem#reason()","jabber::muc::xmucuserinvite#reason()","jabber::muc::useritem#reason=()","jabber::muc::xmucuserinvite#reason=()","jabber::stream#receive()","jabber::roster::iqqueryroster#receive_iq()","jabber::simple#received_messages()","jabber::simple#received_messages?()","emailstats#recent_file()","jabber::simple#reconnect()","jabber::client#register()","jabber::client#register_info()","cgmonitor::monitor#register_plugins()","jabber::roster::helper::rosteritem#remove()","jabber::simple#remove()","jabber::client#remove_registration()","rexml::element#replace_element_text()","jabber::dataforms::xdatafield#required=()","jabber::dataforms::xdatafield#required?()","emailstats#reset_data()","jabber::jid#resource()","jabber::jid#resource=()","jabber::muc::useritem#role()","jabber::muc::useritem#role=()","jabber::muc::mucclient#room()","jabber::simple#roster()","jabber::semaphore#run()","activeblacklistplugin#run_test()","pidify::running?()","pidify::save_pid()","jabber::muc::simplemucclient#say()","jabber::filetransfer::filesource#seek()","jabber::filetransfer::transfersource#seek()","jabber::httpbinding::client#send()","jabber::muc::mucclient#send()","jabber::roster::helper::rosteritem#send()","jabber::stream#send()","jabber::simple#send!()","jabber::muc::mucclient#send_affiliations()","cgmonitor::plugin#send_buffered_emails()","jabber::stream#send_data()","cgmonitor::monitor#send_email()","cgmonitor::plugin#send_email()","cgmonitor::plugin#send_email_buffered()","cgmonitor::monitor#send_im()","cgmonitor::plugin#send_im()","jabber::framework::bot#send_message()","jabber::framework::bot#send_message_xhtml()","jabber::stream#send_with_id()","jabber::command::iqcommand#sessionid()","jabber::command::iqcommand#sessionid=()","jabber::vcard::helper::set()","jabber::vcard::helper#set()","jabber::command::iqcommand#set_action()","jabber::muc::useritem#set_actors()","jabber::muc::useritem#set_affiliation()","jabber::message#set_body()","jabber::xhtml::html#set_body()","jabber::discovery::identity#set_category()","jabber::errorresponse#set_code()","jabber::pubsub::servicehelper#set_config_for()","jabber::pubsub::nodehelper#set_configuration()","jabber::xhtml::html#set_contents()","jabber::muc::useritem#set_continue()","jabber::muc::xmucuseritem#set_continue()","jabber::errorresponse#set_error()","jabber::delay::xdelay#set_from()","jabber::muc::xmucuserinvite#set_from()","jabber::xmppstanza#set_from()","jabber::xmppstanza#set_id()","jabber::discovery::identity#set_iname()","jabber::discovery::item#set_iname()","jabber::version::iqqueryversion#set_iname()","jabber::discovery::item#set_jid()","jabber::muc::useritem#set_jid()","jabber::muc::useritem#set_nick()","jabber::command::iqcommand#set_node()","jabber::discovery::iqquerydiscoinfo#set_node()","jabber::discovery::iqquerydiscoitems#set_node()","jabber::discovery::item#set_node()","jabber::pubsub::servicehelper#set_options_for()","jabber::version::iqqueryversion#set_os()","jabber::framework::bot#set_presence()","jabber::presence#set_priority()","jabber::muc::useritem#set_reason()","jabber::muc::xmucuserinvite#set_reason()","jabber::muc::useritem#set_role()","jabber::command::iqcommand#set_sessionid()","jabber::presence#set_show()","jabber::delay::xdelay#set_stamp()","jabber::command::iqcommand#set_status()","jabber::presence#set_status()","jabber::message#set_subject()","jabber::errorresponse#set_text()","jabber::message#set_thread()","jabber::muc::xmucuserinvite#set_to()","jabber::xmppstanza#set_to()","jabber::discovery::identity#set_type()","jabber::errorresponse#set_type()","jabber::iq#set_type()","jabber::message#set_type()","jabber::presence#set_type()","jabber::xmppstanza#set_type()","jabber::discovery::feature#set_var()","jabber::version::iqqueryversion#set_version()","jabber::xmppelement#set_xml_lang()","jabber::presence#show()","jabber::presence#show=()","frequentspammerplugin#show_config()","checksize#shut_down()","emailstats#shut_down()","testplugin#shut_down()","jabber::bytestreams::iqquerybytestreams#sid()","jabber::bytestreams::iqquerybytestreams#sid=()","activeblacklistplugin#signal()","blacklistplugin#signal()","checksize#signal()","frequentsendersplugin#signal()","frequentspammerplugin#signal()","sendmailblacklistplugin#signal()","testplugin#signal()","time#since()","time::since()","jabber::bytestreams::iqsifile#size()","jabber::filetransfer::filesource#size()","jabber::filetransfer::transfersource#size()","jabber::bytestreams::iqsifile#size=()","activeblacklistplugin#smtp_command()","activeblacklistplugin#smtp_connect()","jabber::usertune::tune#source()","jabber::delay::xdelay#stamp()","jabber::delay::xdelay#stamp=()","cgmonitor::monitor#start()","jabber::bytestreams::socks5bytestreamspeer#start()","jabber::client#start()","jabber::component#start()","jabber::connection#start()","jabber::stream#start()","pidify::start()","pidify::start_as_daemon()","activeblacklistplugin#start_up()","atmailplugin#start_up()","blacklistplugin#start_up()","cgpclamavcrash#start_up()","cgpmcafeecounter#start_up()","cgpmcafeesparkwatcher#start_up()","cgpspamcatchercounter#start_up()","checksize#start_up()","corruptedmailbox#start_up()","emailstats#start_up()","frequentsendersplugin#start_up()","frequentspammerplugin#start_up()","messagethrottlecounterplugin#start_up()","sendmailblacklistplugin#start_up()","spoofedfromaddressplugin#start_up()","syslogremoteplugin#start_up()","testplugin#start_up()","jabber::connection#starttls()","jabber::pubsub::subscription#state()","jabber::pubsub::subscription#state=()","jabber::command::iqcommand#status()","jabber::presence#status()","jabber::simple#status()","jabber::command::iqcommand#status=()","jabber::presence#status=()","jabber::muc::xmucuser#status_code()","jabber::stream#stop()","pidify::stop()","jabber::usertune::helper#stop_playing()","jabber::bytestreams::iqquerybytestreams#streamhost_used()","jabber::jid#strip()","jabber::jid#strip!()","jabber::jid#stripped?()","jabber::pubsub::items#subid()","jabber::pubsub::subscription#subid()","jabber::pubsub::subscriptionconfig#subid()","jabber::pubsub::items#subid=()","jabber::pubsub::subscription#subid=()","jabber::pubsub::subscriptionconfig#subid=()","jabber::muc::simplemucclient#subject()","jabber::message#subject()","jabber::muc::simplemucclient#subject=()","jabber::message#subject=()","jabber::muc::mucclient#submit_room_configuration()","jabber::roster::helper::rosteritem#subscribe()","jabber::pubsub::servicehelper#subscribe_to()","jabber::simple#subscribed_to?()","jabber::pubsub::subscription#subscription()","jabber::roster::rosteritem#subscription()","jabber::roster::rosteritem#subscription=()","jabber::simple#subscription_requests()","jabber::client#supports_anonymous?()","file::tail#tail()","file::tail::logfile::tail()","jabber::errorresponse#text()","jabber::errorresponse#text=()","jabber::message#thread()","jabber::message#thread=()","cgmonitor::plugin#time_at_mark()","cgmonitor::plugin#time_since_mark()","jabber::dataforms::xdata#title()","jabber::dataforms::xdatatitle#title()","jabber::usertune::tune#title()","jabber::dataforms::xdata#title=()","jabber::muc::xmucuserinvite#to()","jabber::xmppstanza#to()","jabber::muc::xmucuserinvite#to=()","jabber::xmppstanza#to=()","jabber::roster::iqqueryroster#to_a()","jabber::dataforms::xdatainstructions#to_s()","jabber::dataforms::xdatatitle#to_s()","jabber::jid#to_s()","jabber::pubsub::servicehelper#to_s()","jabber::xhtml::html#to_text()","jabber::usertune::tune#track()","jabber::dataforms::xdata#type()","jabber::dataforms::xdatafield#type()","jabber::discovery::identity#type()","jabber::errorresponse#type()","jabber::iq#type()","jabber::message#type()","jabber::presence#type()","jabber::pubsub::nodebrowser#type()","jabber::xmppstanza#type()","jabber::dataforms::xdata#type=()","jabber::dataforms::xdatafield#type=()","jabber::discovery::identity#type=()","jabber::errorresponse#type=()","jabber::iq#type=()","jabber::message#type=()","jabber::presence#type=()","jabber::xmppstanza#type=()","jabber::rpc::iqqueryrpc#typed_add()","jabber::xmppelement#typed_add()","rexml::element#typed_add()","jabber::muc::simplemucclient#unban()","jabber::roster::helper::rosteritem#unsubscribe()","jabber::pubsub::servicehelper#unsubscribe_from()","jabber::usertune::tune#uri()","frequentsendersplugin#user_by_message_id()","frequentsendersplugin#user_by_session_id()","messagethrottlecounterplugin#user_by_session_id()","cgmonitor::monitor#validate_address()","jabber::dataforms::xdatafield#value()","jabber::dataforms::xdatafield#value=()","jabber::dataforms::xdatafield#values()","jabber::dataforms::xdatafield#values=()","jabber::dataforms::xdatafield#var()","jabber::discovery::feature#var()","jabber::dataforms::xdatafield#var=()","jabber::discovery::feature#var=()","jabber::iq#vcard()","jabber::caps::c#ver()","jabber::caps::helper#ver()","jabber::version::iqqueryversion#version()","jabber::version::iqqueryversion#version=()","jabber::semaphore#wait()","jabber::stream::threadblock#wait()","jabber::roster::helper#wait_for_roster()","jabber::stream::threadblock#wakeup()","cgmonitor::monitor#warning_message()","cgmonitor::plugin#warning_message()","jabber::bytestreams::ibb#write()","jabber::bytestreams::socks5bytestreams#write()","emailstats#write_data()","frequentspammerplugin#write_status()","jabber::featurenegotiation::iqfeature#x()","jabber::xparent#x()","jabber::xmppelement#xml_lang()","jabber::xmppelement#xml_lang=()","jabber::bytestreams::streamhost#zeroconf()","jabber::bytestreams::streamhost#zeroconf=()",""],"info":[["ActiveBlacklistPlugin","","ActiveBlacklistPlugin.html","",""],["AtMailPlugin","","AtMailPlugin.html","",""],["Base64","","Base64.html","","<p>Ruby 1.9 has dropped the Base64 module, this is a replacement\n<p>We could replace all call by Array#pack …\n"],["BlacklistPlugin","","BlacklistPlugin.html","",""],["CGMonitor","","CGMonitor.html","","<p>A monitor for CommuiGate log files. Basically it tails the most recent\nCommuniGate or UNIX log files …\n"],["CGMonitor::Monitor","","CGMonitor/Monitor.html","","<p>A continuous log tailer which registers plugins, activates plugins, and\ncalls Plugin#every_line for every …\n"],["CGMonitor::Plugin","","CGMonitor/Plugin.html","","<p>The abstract parent of all Plugin classes.  Subclass Plugin to create a\nCGMonitor plugin.  A plugin must …\n"],["CGPClamAVCrash","","CGPClamAVCrash.html","",""],["CGPMcAfeeCounter","","CGPMcAfeeCounter.html","",""],["CGPMcAfeeSparkwatcher","","CGPMcAfeeSparkwatcher.html","","<p>Look for lines like this: ENQUEUERRULES rule(McAfee) conditions met\n"],["CGPSpamCatcherCounter","","CGPSpamCatcherCounter.html","",""],["CGPSpamCatcherRestart","","CGPSpamCatcherRestart.html","","<p>Look for lines like this: EXTFILTER(SpamCatcher) inp(23): * Restarting the\nengine\n"],["CheckSize","","CheckSize.html","","<p>$Id: check_size-plugin.rb 1125 2008-10-20 18:35:20Z swickp $\n"],["CorruptedMailbox","","CorruptedMailbox.html","",""],["EmailStats","","EmailStats.html","",""],["File","","File.html","",""],["File::Tail","","File/Tail.html","","<p>File::Tail - Tailing files in Ruby\n<p>Description\n<p>This is a small ruby library that allows it to “tail” …\n"],["File::Tail::BreakException","","File/Tail/BreakException.html","","<p>The BreakException is raised if the <code>break_if_eof</code> attribute is\nset to a true value and the end of tailed …\n"],["File::Tail::DeletedException","","File/Tail/DeletedException.html","","<p>The DeletedException is raised if a file is deleted while tailing it.\n"],["File::Tail::Logfile","","File/Tail/Logfile.html","","<p>This is an easy to use Logfile class that includes the File::Tail module.\n<p>Usage\n<p>The unix command “tail …\n"],["File::Tail::ReopenException","","File/Tail/ReopenException.html","","<p>The ReopenException is raised internally if File::Tail gets suspicious\nsomething unusual has happend …\n"],["File::Tail::ReturnException","","File/Tail/ReturnException.html","","<p>The ReturnException is raised and caught internally to implement “tail -10”\nbehaviour.\n"],["File::Tail::TailException","","File/Tail/TailException.html","","<p>This is the base class of all exceptions that are raised in File::Tail.\n"],["FrequentSendersPlugin","","FrequentSendersPlugin.html","","<p>Note that this will operate on webmail messages if run on a frontend, but\nwill not operate on PIPE-d …\n"],["FrequentSpammerPlugin","","FrequentSpammerPlugin.html","",""],["Hash","","Hash.html","",""],["Jabber","","Jabber.html","","<p>XMPP4R - XMPP Library for Ruby\n<p>License &mdash; Ruby’s license (see the LICENSE file) or GNU GPL, at your option. …\n\n"],["Jabber::ArgumentError","","Jabber/ArgumentError.html","","<p>A client-side only argument error\n"],["Jabber::Bytestreams","","Jabber/Bytestreams.html","",""],["Jabber::Bytestreams::IBB","","Jabber/Bytestreams/IBB.html","","<p>In-Band Bytestreams (JEP-0047) implementation\n<p>Don’t use directly, use IBBInitiator and IBBTarget\n<p>In-Band …\n"],["Jabber::Bytestreams::IBBInitiator","","Jabber/Bytestreams/IBBInitiator.html","","<p>Implementation of IBB at the initiator side\n"],["Jabber::Bytestreams::IBBQueueItem","","Jabber/Bytestreams/IBBQueueItem.html","","<p>Represents an item in the internal data queue\n"],["Jabber::Bytestreams::IBBTarget","","Jabber/Bytestreams/IBBTarget.html","","<p>Implementation of IBB at the target side\n"],["Jabber::Bytestreams::IqQueryBytestreams","","Jabber/Bytestreams/IqQueryBytestreams.html","","<p>Class for accessing &lt;query/&gt; elements with\nxmlns=‘jabber.org/protocol/bytestreams’ in &lt;iq/&gt; …\n"],["Jabber::Bytestreams::IqSi","","Jabber/Bytestreams/IqSi.html","","<p>Iq child ‘si’ for Stream-Initiation\n"],["Jabber::Bytestreams::IqSiFile","","Jabber/Bytestreams/IqSiFile.html","","<p>File-transfer meta-information, may appear as &lt;file/&gt; in IqSi\n"],["Jabber::Bytestreams::IqSiFileRange","","Jabber/Bytestreams/IqSiFileRange.html","","<p>Information for ranged transfers\n"],["Jabber::Bytestreams::SOCKS5Bytestreams","","Jabber/Bytestreams/SOCKS5Bytestreams.html","","<p>SOCKS5 Bytestreams (JEP-0065) implementation\n<p>Don’t use directly, use SOCKS5BytestreamsInitiator and\nSOCKS5BytestreamsTarget …\n"],["Jabber::Bytestreams::SOCKS5BytestreamsInitiator","","Jabber/Bytestreams/SOCKS5BytestreamsInitiator.html","","<p>SOCKS5Bytestreams implementation for the initiator side\n"],["Jabber::Bytestreams::SOCKS5BytestreamsPeer","","Jabber/Bytestreams/SOCKS5BytestreamsPeer.html","","<p>This class will be instantiated by SOCKS5BytestreamsServer upon accepting a\nnew connection\n"],["Jabber::Bytestreams::SOCKS5BytestreamsServer","","Jabber/Bytestreams/SOCKS5BytestreamsServer.html","","<p>The SOCKS5BytestreamsServer is an implementation of a SOCKS5 server.\n<p>You can use it if you’re reachable …\n"],["Jabber::Bytestreams::SOCKS5BytestreamsServerStreamHost","","Jabber/Bytestreams/SOCKS5BytestreamsServerStreamHost.html","","<p>A subclass of StreamHost which possesses a server attribute, to let\nSOCKS5BytestreamsInitiator know this …\n"],["Jabber::Bytestreams::SOCKS5BytestreamsTarget","","Jabber/Bytestreams/SOCKS5BytestreamsTarget.html","","<p>SOCKS5 Bytestreams implementation of the target site\n"],["Jabber::Bytestreams::SOCKS5Socket","","Jabber/Bytestreams/SOCKS5Socket.html","","<p>A SOCKS5 client implementation\n<p>Usage:\n<p>Initialize with proxy’s address and port\n"],["Jabber::Bytestreams::StreamHost","","Jabber/Bytestreams/StreamHost.html","","<p>&lt;streamhost/&gt; element, normally appear as children of\nIqQueryBytestreams\n"],["Jabber::Bytestreams::StreamHostUsed","","Jabber/Bytestreams/StreamHostUsed.html","","<p>&lt;streamhost-used/&gt; element, normally appears as child of\nIqQueryBytestreams\n"],["Jabber::Callback","","Jabber/Callback.html","","<p>This class is used to store callbacks inside CallbackList. See the\nCallbackList class for more detailed …\n"],["Jabber::CallbackList","","Jabber/CallbackList.html","","<p>This class manages a list of callbacks.\n<p>Callbacks management and priority\n<p>Callbacks are managed by the …\n"],["Jabber::Caps","","Jabber/Caps.html","",""],["Jabber::Caps::C","","Jabber/Caps/C.html","","<p>The &lt;c/&gt; XMPP element, used to advertise entity capabilities.\n<p>See www.xmpp.org/extensions/xep-0115.html#protocol …\n"],["Jabber::Caps::Helper","","Jabber/Caps/Helper.html","","<p>A Helper to manage advertising and discovery of entity capabilities.\n<p>Following XEP-0115 (ver 1.4 www.xmpp.org/extensions/xep-0115.html …\n"],["Jabber::Client","","Jabber/Client.html","","<p>The client class provides everything needed to build a basic XMPP Client.\n<p>If you want your connection …\n"],["Jabber::ClientAuthenticationFailure","","Jabber/ClientAuthenticationFailure.html","",""],["Jabber::Command","","Jabber/Command.html","",""],["Jabber::Command::IqCommand","","Jabber/Command/IqCommand.html","","<p>Class for handling ad-hoc commands (JEP 0050)\n<p>A command is uniquely identified by its node attribute. …\n"],["Jabber::Command::Responder","","Jabber/Command/Responder.html","","<p>The Responder Helper handles the low-level stuff of the Ad-hoc commands\n(JEP 0050).\n"],["Jabber::Component","","Jabber/Component.html","","<p>The component class provides everything needed to build a XMPP Component.\n<p>Components are more flexible …\n"],["Jabber::ComponentAuthenticationFailure","","Jabber/ComponentAuthenticationFailure.html","",""],["Jabber::Connection","","Jabber/Connection.html","","<p>The connection class manages the TCP connection to the Jabber server\n"],["Jabber::Dataforms","","Jabber/Dataforms.html","",""],["Jabber::Dataforms::XData","","Jabber/Dataforms/XData.html","","<p>Data Forms (JEP-0004) implementation\n"],["Jabber::Dataforms::XDataField","","Jabber/Dataforms/XDataField.html","","<p>Child of XData, contains configurable/configured options of this Data Form\n"],["Jabber::Dataforms::XDataInstructions","","Jabber/Dataforms/XDataInstructions.html","","<p>Child of XData, contains the instructions of this Data Form\n"],["Jabber::Dataforms::XDataReported","","Jabber/Dataforms/XDataReported.html","","<p>The &lt;reported/&gt; element, can contain XDataField elements\n"],["Jabber::Dataforms::XDataTitle","","Jabber/Dataforms/XDataTitle.html","","<p>Child of XData, contains the title of this Data Form\n"],["Jabber::Delay","","Jabber/Delay.html","",""],["Jabber::Delay::XDelay","","Jabber/Delay/XDelay.html","","<p>Implementation of JEP 0091 for &lt;x xmlns=‘jabber:x:delay’ stamp=‘…’\n…/&gt; applied on &lt;message/&gt; …\n"],["Jabber::Discovery","","Jabber/Discovery.html","",""],["Jabber::Discovery::Feature","","Jabber/Discovery/Feature.html","","<p>Service Discovery feature to add() to IqQueryDiscoInfo\n<p>Please note that JEP 0030 requires var to be set, …\n"],["Jabber::Discovery::Identity","","Jabber/Discovery/Identity.html","","<p>Service Discovery identity to add() to IqQueryDiscoInfo\n<p>Please note that XEP 0030 requires both category …\n"],["Jabber::Discovery::IqQueryDiscoInfo","","Jabber/Discovery/IqQueryDiscoInfo.html","","<p>Class for handling Service Discovery queries, info (JEP 0030)\n<p>This &lt;query/&gt; may contain multiple …\n"],["Jabber::Discovery::IqQueryDiscoItems","","Jabber/Discovery/IqQueryDiscoItems.html","","<p>Class for handling Service Discovery queries, items (JEP 0030)\n<p>This &lt;query/&gt; may contain multiple …\n"],["Jabber::Discovery::Item","","Jabber/Discovery/Item.html","","<p>Service Discovery item to add() to IqQueryDiscoItems\n<p>Please note that JEP 0030 requires the jid to occur …\n"],["Jabber::Discovery::Responder","","Jabber/Discovery/Responder.html","","<p>Responds to Service Discovery queries on a given node\n<p>Modify returned elements by these attributes:\n<p>Responder#identities …\n"],["Jabber::ErrorResponse","","Jabber/ErrorResponse.html","","<p>A class used to build/parse &lt;error/&gt; elements. Look at XEP-0086 for\nexplanation: www.xmpp.org/extensions/xep-0086.html …\n"],["Jabber::FeatureNegotiation","","Jabber/FeatureNegotiation.html","",""],["Jabber::FeatureNegotiation::IqFeature","","Jabber/FeatureNegotiation/IqFeature.html","","<p>Feature negotiation, can appear as direct child to Iq or as child of IqSi\n"],["Jabber::FileTransfer","","Jabber/FileTransfer.html","",""],["Jabber::FileTransfer::FileSource","","Jabber/FileTransfer/FileSource.html","","<p>Simple implementation of TransferSource for sending simple files (supports\nranged transfers)\n"],["Jabber::FileTransfer::Helper","","Jabber/FileTransfer/Helper.html","","<p>The FileTransfer helper provides the ability to respond to incoming and to\noffer outgoing file-transfers. …\n"],["Jabber::FileTransfer::TransferSource","","Jabber/FileTransfer/TransferSource.html","","<p>The TransferSource is an interface (Mix-in) which sources for\nFileTransfer#offer should include\n"],["Jabber::Framework","","Jabber/Framework.html","",""],["Jabber::Framework::Base","","Jabber/Framework/Base.html","",""],["Jabber::Framework::Bot","","Jabber/Framework/Bot.html","","<p>Abstract handler methods that <strong>may</strong> be implemented by a\nderiving class:\n<p>on_message(text)\n<p>on_message_xhtml …\n"],["Jabber::HTTPBinding","","Jabber/HTTPBinding.html","",""],["Jabber::HTTPBinding::Client","","Jabber/HTTPBinding/Client.html","","<p>This class implements an alternative Client using HTTP Binding (JEP0124).\n<p>This class is designed to be …\n"],["Jabber::IdGenerator","","Jabber/IdGenerator.html","","<p>The Jabber::IdGenerator class generates unique IDs for use in XMMP stanzas.\nJabber::IdGenerator includes …\n"],["Jabber::Iq","","Jabber/Iq.html","","<p>IQ: Information/Query (see RFC3920 - 9.2.3\n<p>A class used to build/parse IQ requests/responses\n"],["Jabber::IqQuery","","Jabber/IqQuery.html","","<p>A class used to build/parse IQ Query requests/responses\n"],["Jabber::JID","","Jabber/JID.html","","<p>The JID class represents a Jabber Identifier as described by RFC3920\nsection 3.1.\n<p>Note that you can use …\n"],["Jabber::JabberError","","Jabber/JabberError.html","","<p>All of our custom errors are superclassed by JabberError &lt; StandardError\n"],["Jabber::MUC","","Jabber/MUC.html","",""],["Jabber::MUC::IqQueryMUCAdmin","","Jabber/MUC/IqQueryMUCAdmin.html","",""],["Jabber::MUC::IqQueryMUCAdminItem","","Jabber/MUC/IqQueryMUCAdminItem.html","",""],["Jabber::MUC::IqQueryMUCOwner","","Jabber/MUC/IqQueryMUCOwner.html","",""],["Jabber::MUC::MUCBrowser","","Jabber/MUC/MUCBrowser.html","","<p>The MUCBrowser helper can be used to discover Multi-User-Chat components\nvia Service Discovery\n<p>See JEP …\n"],["Jabber::MUC::MUCClient","","Jabber/MUC/MUCClient.html","","<p>The MUCClient Helper handles low-level stuff of the Multi-User Chat (JEP\n0045).\n<p>Use one instance per room. …\n"],["Jabber::MUC::SimpleMUCClient","","Jabber/MUC/SimpleMUCClient.html","","<p>This class attempts to implement a lot of complexity of the Multi-User Chat\nprotocol. If you want to …\n"],["Jabber::MUC::UserItem","","Jabber/MUC/UserItem.html","","<p>Don’t use this. It is the base class (unifying shared attributes) of\nXMUCUserItem and IqQueryMUCAdminItem …\n"],["Jabber::MUC::XMUC","","Jabber/MUC/XMUC.html","","<p>Class for &lt;x/&gt; elements with namespace jabber.org/protocol/muc\n<p>See JEP-0045 for details\n"],["Jabber::MUC::XMUCUser","","Jabber/MUC/XMUCUser.html","","<p>Class for &lt;x/&gt; elements with namespace jabber.org/protocol/muc#user\n<p>See JEP-0058 for details\n"],["Jabber::MUC::XMUCUserInvite","","Jabber/MUC/XMUCUserInvite.html","",""],["Jabber::MUC::XMUCUserItem","","Jabber/MUC/XMUCUserItem.html","",""],["Jabber::Message","","Jabber/Message.html","","<p>The Message class manages the &lt;message/&gt; stanzas, which is used for\nall messaging communication. …\n"],["Jabber::NoNameXmlnsRegistered","","Jabber/NoNameXmlnsRegistered.html","","<p>TODO : Give this a better name\n"],["Jabber::Presence","","Jabber/Presence.html","","<p>The presence class is used to construct presence messages to send to the\nJabber service.\n"],["Jabber::PubSub","","Jabber/PubSub.html","",""],["Jabber::PubSub::Configuration","","Jabber/PubSub/Configuration.html","",""],["Jabber::PubSub::Event","","Jabber/PubSub/Event.html","","<p>Event a publishing event\n"],["Jabber::PubSub::EventItem","","Jabber/PubSub/EventItem.html","","<p>An Item wrapped in a Pubsub Event.\n<p>See example 2 in www.xmpp.org/extensions/xep-0060.html#intro-howitworks …\n"],["Jabber::PubSub::EventItems","","Jabber/PubSub/EventItems.html","","<p>Items wrapped in a Pubsub Event.\n<p>See example 2 in www.xmpp.org/extensions/xep-0060.html#intro-howitworks …\n"],["Jabber::PubSub::IqPubSub","","Jabber/PubSub/IqPubSub.html","",""],["Jabber::PubSub::IqPubSubOwner","","Jabber/PubSub/IqPubSubOwner.html","",""],["Jabber::PubSub::Item","","Jabber/PubSub/Item.html","","<p>Item One PubSub Item\n"],["Jabber::PubSub::Items","","Jabber/PubSub/Items.html","","<p>Items a collection of Items\n"],["Jabber::PubSub::NodeBrowser","","Jabber/PubSub/NodeBrowser.html","",""],["Jabber::PubSub::NodeConfig","","Jabber/PubSub/NodeConfig.html","","<p>NodeConfig\n<p>A &lt;configure&gt; XMPP element for pubsub nodes, see example 123 in\nwww.xmpp.org/extensions/xep-0060.html#owner-create-and-configure …\n"],["Jabber::PubSub::NodeHelper","","Jabber/PubSub/NodeHelper.html","",""],["Jabber::PubSub::OwnerNodeConfig","","Jabber/PubSub/OwnerNodeConfig.html","","<p>OwnerNodeConfig\n<p>A &lt;configure&gt; stanza for ‘Owner’ use cases\n<p>see example 125 in\nwww.xmpp.org/extensions/xep-0060.html#owner-configure-request …\n"],["Jabber::PubSub::Publish","","Jabber/PubSub/Publish.html","","<p>Publish\n<p>A &lt;publish&gt; XMPP element, see example 1 in\nwww.xmpp.org/extensions/xep-0060.html#intro-howitworks …\n"],["Jabber::PubSub::ServiceHelper","","Jabber/PubSub/ServiceHelper.html","","<p>A Helper representing a PubSub Service\n"],["Jabber::PubSub::Subscription","","Jabber/PubSub/Subscription.html","","<p>Subscription\n"],["Jabber::PubSub::SubscriptionConfig","","Jabber/PubSub/SubscriptionConfig.html","","<p>SubscriptionConfig\n<p>An &lt;options&gt; XMPP element, see example 57 in\nwww.xmpp.org/extensions/xep-0060.html#subscriber-configure-success …\n"],["Jabber::PubSub::Unsubscribe","","Jabber/PubSub/Unsubscribe.html","","<p>Unsubscribe\n"],["Jabber::RPC","","Jabber/RPC.html","",""],["Jabber::RPC::Client","","Jabber/RPC/Client.html","","<p>XMLRPC Client\n"],["Jabber::RPC::IqQueryRPC","","Jabber/RPC/IqQueryRPC.html","",""],["Jabber::RPC::Server","","Jabber/RPC/Server.html","","<p>XMLRPC Server\n"],["Jabber::Roster","","Jabber/Roster.html","",""],["Jabber::Roster::Helper","","Jabber/Roster/Helper.html","","<p>The Roster helper intercepts <code>&lt;iq/&gt;</code> stanzas with\nJabber::IqQueryRoster and <code>&lt;presence/&gt;</code> stanzas, …\n"],["Jabber::Roster::Helper::RosterItem","","Jabber/Roster/Helper/RosterItem.html","","<p>These are extensions to RosterItem to carry presence information. This\ninformation is <strong>not</strong> stored in  …\n"],["Jabber::Roster::IqQueryRoster","","Jabber/Roster/IqQueryRoster.html","","<p>Class for handling roster updates\n<p>You must do ‘client.send(Iq.new_rosterget)’ or else you will have nothing …\n"],["Jabber::Roster::RosterItem","","Jabber/Roster/RosterItem.html","","<p>Class containing the &lt;item/&gt; elements of the roster\n<p>The ‘name’ attribute has been renamed to ‘iname’ …\n"],["Jabber::Roster::RosterX","","Jabber/Roster/RosterX.html","",""],["Jabber::Roster::RosterXItem","","Jabber/Roster/RosterXItem.html","",""],["Jabber::Roster::XRoster","","Jabber/Roster/XRoster.html","","<p>Implementation of JEP-0144 for <code>&lt;x\nxmlns='http://jabber.org/protocol/rosterx'/&gt;</code> attached to\n<code>&lt;message/&gt;</code> …\n"],["Jabber::Roster::XRosterItem","","Jabber/Roster/XRosterItem.html","","<p>Class containing an &lt;item/&gt; element\n<p>The ‘name’ attribute has been renamed to ‘iname’ here as ‘name’ …\n"],["Jabber::SASL","","Jabber/SASL.html","","<p>Helpers for SASL authentication (RFC2222)\n<p>You might not need to use them directly, they are invoked by …\n"],["Jabber::SASL::Anonymous","","Jabber/SASL/Anonymous.html","","<p>SASL Anonymous authentication helper\n"],["Jabber::SASL::Base","","Jabber/SASL/Base.html","","<p>SASL mechanism base class (stub)\n"],["Jabber::SASL::DigestMD5","","Jabber/SASL/DigestMD5.html","","<p>SASL DIGEST-MD5 authentication helper (RFC2831)\n"],["Jabber::SASL::Plain","","Jabber/SASL/Plain.html","","<p>SASL PLAIN authentication helper (RFC2595)\n"],["Jabber::SOCKS5Error","","Jabber/SOCKS5Error.html","","<p>TODO : Give this a better name\n"],["Jabber::Semaphore","","Jabber/Semaphore.html","","<p>This class implements semaphore for threads synchronization.\n"],["Jabber::Simple","","Jabber/Simple.html","",""],["Jabber::Stream","","Jabber/Stream.html","","<p>The stream class manages a connection stream (a file descriptor using which\nXML messages are read and …\n"],["Jabber::Stream::ThreadBlock","","Jabber/Stream/ThreadBlock.html","","<p>This is used by Jabber::Stream internally to keep track of any blocks which\nwere passed to Stream#send …\n"],["Jabber::StreamParser","","Jabber/StreamParser.html","","<p>The StreamParser uses REXML to parse the incoming XML stream of the Jabber\nprotocol and fires XMPPStanza …\n"],["Jabber::UserTune","","Jabber/UserTune.html","",""],["Jabber::UserTune::Helper","","Jabber/UserTune/Helper.html","","<p>A Helper for XEP-0118 User Tune\n<p>Use this helper to send user tunes, or receive them from a specified jid. …\n"],["Jabber::UserTune::Tune","","Jabber/UserTune/Tune.html","","<p>The &lt;tune&gt; XMPP element, as defined in XEP-0118 User Tune\n<p>See www.xmpp.org/extensions/xep-0118.html …\n"],["Jabber::Vcard","","Jabber/Vcard.html","",""],["Jabber::Vcard::Helper","","Jabber/Vcard/Helper.html","","<p>The Vcard helper retrieves vCards\n"],["Jabber::Vcard::IqVcard","","Jabber/Vcard/IqVcard.html","","<p>vCard container for User Information (can be specified by users themselves,\nmostly kept on servers) ( …\n"],["Jabber::Version","","Jabber/Version.html","",""],["Jabber::Version::IqQueryVersion","","Jabber/Version/IqQueryVersion.html","","<p>Class for handling queries for ‘Software Version’ (JEP 0092)\n<p>Notice that according to JEP 0092 only the …\n"],["Jabber::Version::Responder","","Jabber/Version/Responder.html","","<p>A class to answer version requests using IqQueryVersion\n<p>If you don’t need the flexibility of dynamic responses …\n"],["Jabber::Version::SimpleResponder","","Jabber/Version/SimpleResponder.html","","<p>A class to answer version requests using IqQueryVersion\n<p>This is simplification as one doesn’t need dynamic …\n"],["Jabber::X","","Jabber/X.html","","<p>A class used to build/parse &lt;x/&gt; elements\n<p>These elements may occur as “attachments” in …\n"],["Jabber::XHTML","","Jabber/XHTML.html","",""],["Jabber::XHTML::Body","","Jabber/XHTML/Body.html","","<p>HTML Body element, must be the only child of XHTML::HTML\n"],["Jabber::XHTML::HTML","","Jabber/XHTML/HTML.html","","<p>XHTML-IM (XEP-0071) container\n<p>The important methods are:\n<p>HTML#contents=\n"],["Jabber::XMPPElement","","Jabber/XMPPElement.html","","<p>This class represents an XML element and provides functionality for\nautomatic casting of XML element …\n"],["Jabber::XMPPStanza","","Jabber/XMPPStanza.html","","<p>root class of all Jabber XML elements\n"],["Jabber::XParent","","Jabber/XParent.html","",""],["MessageThrottleCounterPlugin","","MessageThrottleCounterPlugin.html","",""],["Pathname","","Pathname.html","",""],["Pidify","","Pidify.html","","<p>Use the module methods in Pidify to save/delete the PID of a running\nscript, or kill a running script …\n"],["REXML","","REXML.html","","<p>REXML : Adds custom helper methods to the REXML module.\n"],["REXML::Element","","REXML/Element.html","","<p>this class adds a few helper methods to REXML::Element\n"],["REXML::IOSource","","REXML/IOSource.html","","<p>FIXME : Is this still needed now that we’re a bit past Ruby 1.8.3?? Very\ndirty fix for the :progress …\n"],["SendmailBlacklistPlugin","","SendmailBlacklistPlugin.html","",""],["SpoofedFromAddressPlugin","","SpoofedFromAddressPlugin.html","",""],["SyslogRemotePlugin","","SyslogRemotePlugin.html","",""],["TestPlugin","","TestPlugin.html","",""],["Time","","Time.html","",""],["XMLRPC","","XMLRPC.html","",""],["XMLRPC::Create","","XMLRPC/Create.html","",""],["<=>","Jabber::JID","Jabber/JID.html#method-i-3C-3D-3E","(o)","<p>Compare two JIDs, helpful for sorting etc.\n<p>String representations are compared, see JID#to_s\n"],["<=>","Jabber::Presence","Jabber/Presence.html#method-i-3C-3D-3E","(o)","<p>Compare two presences using priority (with cmp_interest as fall-back).\n"],["==","Jabber::JID","Jabber/JID.html#method-i-3D-3D","(o)","<p>Ccompare to another JID\n<p>String representations are compared, see JID#to_s\n"],["==","REXML::Element","REXML/Element.html#method-i-3D-3D","(o)","<p>Test for equality of two elements, useful for assert_equal in test cases.\nTries to parse String o as …\n"],["[]","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-5B-5D","(jid)","<p>Get an item by jid\n<p>If not available tries to look for it with the resource stripped\n"],["[]","Jabber::Roster::IqQueryRoster","Jabber/Roster/IqQueryRoster.html#method-i-5B-5D","(jid)","<p>Get roster item by JID\n<p>jid &mdash; <p>JID &mdash; or [Nil]\n\n<p>result &mdash; <p>RosterItem &mdash; \n\n"],["[]","Jabber::Vcard::IqVcard","Jabber/Vcard/IqVcard.html#method-i-5B-5D","(name)","<p>Get an elements/fields text\n<p>vCards have too much possible children, so ask for them here and extract\nthe …\n"],["[]=","Jabber::Vcard::IqVcard","Jabber/Vcard/IqVcard.html#method-i-5B-5D-3D","(name, text)","<p>Set an elements/fields text\n<p>name &mdash; <p>String &mdash; XPath\n\n<p>text &mdash; <p>String &mdash; Value\n"],["accept","Jabber::Bytestreams::IBBTarget","Jabber/Bytestreams/IBBTarget.html#method-i-accept","()","<p>Wait for the initiator side to start the stream.\n"],["accept","Jabber::Bytestreams::SOCKS5BytestreamsTarget","Jabber/Bytestreams/SOCKS5BytestreamsTarget.html#method-i-accept","()","<p>Wait until the stream has been established\n<p>May raise various exceptions\n"],["accept","Jabber::FileTransfer::Helper","Jabber/FileTransfer/Helper.html#method-i-accept","(iq, offset=nil, length=nil)","<p>Accept an incoming file-transfer, to be used in a block given to\nadd_incoming_callback\n<p>offset and length …\n"],["accept_features","Jabber::Connection","Jabber/Connection.html#method-i-accept_features","()",""],["accept_subscription","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-accept_subscription","(jid, iname=nil)","<p>Accept a subscription request\n<p>Sends a &lt;presence type=‘subscribed’/&gt; stanza\n<p>Adds the contact to your …\n"],["accept_subscription_from?","Jabber::Framework::Bot","Jabber/Framework/Bot.html#method-i-accept_subscription_from-3F","(jid)","<p>Front-end for Roster::Helper#add_subscription_request_callback\n<p>Can be overwritten, must return true or …\n"],["accept_subscriptions=","Jabber::Simple","Jabber/Simple.html#method-i-accept_subscriptions-3D","(accept_status)","<p>Change whether or not subscriptions (friend requests) are automatically\naccepted.\n"],["accept_subscriptions?","Jabber::Simple","Jabber/Simple.html#method-i-accept_subscriptions-3F","()","<p>Returns true if auto-accept subscriptions (friend requests) is enabled\n(default), false otherwise.\n"],["action","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-action","()","<p>Get the action of the Command stanza\n<p>The following Symbols are allowed:\n<p>:execute\n"],["action","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-action","()","<p>Get action for this roster item\n<p>:add\n<p>:modify\n"],["action=","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-action-3D","(v)","<p>Set the action of the Command stanza (see IqCommand#action for details)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["action=","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-action-3D","(a)","<p>Set action for this roster item (see action)\n"],["actions","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-actions","()","<p>Get the actions allowed\n<p>return &mdash; <p>REXML::Element &mdash; or nil\n\n\n"],["activate","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-i-activate","()","<p>Get the text of the &lt;activate/&gt; child\n<p>result &mdash; <p>JID &mdash; or [nil]\n\n\n"],["activate=","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-i-activate-3D","(s)","<p>Set the text of the &lt;activate/&gt; child\n<p>s &mdash; <p>JID &mdash; \n\n"],["activate_plugins","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-activate_plugins","()","<p>Calls activate_plugin on all classes in Plugin::registered_plugins or\nrequested_plugins, if specific …\n"],["active?","Jabber::Bytestreams::IBB","Jabber/Bytestreams/IBB.html#method-i-active-3F","()",""],["active?","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-active-3F","()","<p>Is the MUC client active?\n<p>This is false after initialization, true after joining and false after\nexit/kick …\n"],["actors","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-actors","()",""],["actors=","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-actors-3D","(a)",""],["add","Jabber::CallbackList","Jabber/CallbackList.html#method-i-add","(prio = 0, ref = nil, proc = nil, &block)","<p>Add a callback to the list\n<p>List will be sorted afterwards\n<p>prio &mdash; <p>Integer &mdash; the callback’s priority, the higher, …\n"],["add","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-add","(jid, iname=nil, subscribe=false)","<p>Add a user to your roster\n<p>Threading is encouraged as the function waits for a result. ServerError is\nthrown …\n"],["add","Jabber::Simple","Jabber/Simple.html#method-i-add","(*jids)","<p>Ask the users specified by jids for authorization (i.e., ask them to add\nyou to their contact list). …\n"],["add_address","Jabber::Bytestreams::SOCKS5BytestreamsServer","Jabber/Bytestreams/SOCKS5BytestreamsServer.html#method-i-add_address","(address)","<p>Add an external IP address\n<p>This is a must-have, as SOCKS5BytestreamsInitiator must inform the target\nwhere …\n"],["add_cap","Jabber::Framework::Bot","Jabber/Framework/Bot.html#method-i-add_cap","(capability)","<p>Add feature namespace to Capabilities Discovery\n"],["add_commands_disco_callback","Jabber::Command::Responder","Jabber/Command/Responder.html#method-i-add_commands_disco_callback","(priority = 0, ref = nil, &block)","<p>Add a callback for &lt;query&gt; stanzas asking for the list of ad-hoc\ncommands\n"],["add_commands_exec_callback","Jabber::Command::Responder","Jabber/Command/Responder.html#method-i-add_commands_exec_callback","(priority = 0, ref = nil, &block)","<p>Add a callback for &lt;command&gt; stanzas asking for the execution of an\nad-hoc command\n"],["add_event_callback","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-add_event_callback","(prio = 200, ref = nil, &block)","<p>Register callbacks for incoming events (i.e. Message stanzas containing)\nPubSub notifications\n"],["add_feature","Jabber::Discovery::Responder","Jabber/Discovery/Responder.html#method-i-add_feature","(feature)","<p>Add a feature\n<p>feature &mdash; <p>Jabber::Discovery::Feature &mdash; or [String]\n\n\n"],["add_features","Jabber::Discovery::Responder","Jabber/Discovery/Responder.html#method-i-add_features","(features)","<p>Add a series of features\n<p>features &mdash; Array of [Jabber::Discovery::Feature] or [String]\n\n"],["add_incoming_callback","Jabber::FileTransfer::Helper","Jabber/FileTransfer/Helper.html#method-i-add_incoming_callback","(priority = 0, ref = nil, &block)","<p>Add a callback which will be invoked upon an incoming file-transfer\n<p>block takes two arguments:\n<p>Iq\n"],["add_iq_callback","Jabber::Stream","Jabber/Stream.html#method-i-add_iq_callback","(priority = 0, ref = nil, &block)","<p>Adds a callback block to process received Iqs\n<p>priority &mdash; <p>Integer &mdash; The callback’s priority, the higher, the …\n\n"],["add_join_callback","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-add_join_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for &lt;presence/&gt; stanzas indicating availability of a\nMUC participant\n<p>This callback …\n"],["add_leave_callback","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-add_leave_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for &lt;presence/&gt; stanzas indicating unavailability of a\nMUC participant\n<p>The callback …\n"],["add_message_callback","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-add_message_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for &lt;message/&gt; stanza directed to the whole room.\n<p>See MUCClient#add_private_message_callback …\n"],["add_message_callback","Jabber::Stream","Jabber/Stream.html#method-i-add_message_callback","(priority = 0, ref = nil, &block)","<p>Adds a callback block to process received Messages\n<p>priority &mdash; <p>Integer &mdash; The callback’s priority, the higher, …\n\n"],["add_one","EmailStats","EmailStats.html#method-i-add_one","(label)",""],["add_pep_notification","Jabber::Framework::Bot","Jabber/Framework/Bot.html#method-i-add_pep_notification","(node, &callback)",""],["add_presence","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-add_presence","(newpres)","<p>Add presence and sort presences (unless type is :unavailable or :error)\n<p>This overwrites previous stanzas …\n"],["add_presence_callback","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-add_presence_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for a &lt;presence/&gt; stanza which is neither a join nor a\nleave. This will be called …\n"],["add_presence_callback","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-add_presence_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for Jabber::Presence updates\n<p>This will be called for <code>&lt;presence/&gt;</code> stanzas for known …\n"],["add_presence_callback","Jabber::Stream","Jabber/Stream.html#method-i-add_presence_callback","(priority = 0, ref = nil, &block)","<p>Adds a callback block to process received Presences\n<p>priority &mdash; <p>Integer &mdash; The callback’s priority, the higher, …\n\n"],["add_private_message_callback","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-add_private_message_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for &lt;message/&gt; stanza with type=‘chat’.\n<p>These stanza are normally not broadcasted …\n"],["add_query_callback","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-add_query_callback","(prio = 0, ref = nil, &block)","<p>Add a callback to be called when a query has been processed\n<p>Because update callbacks are called for each …\n"],["add_stanza_callback","Jabber::Stream","Jabber/Stream.html#method-i-add_stanza_callback","(priority = 0, ref = nil, &block)","<p>Adds a callback block to process received Stanzas\n<p>priority &mdash; <p>Integer &mdash; The callback’s priority, the higher, …\n\n"],["add_streamhost","Jabber::Bytestreams::SOCKS5BytestreamsInitiator","Jabber/Bytestreams/SOCKS5BytestreamsInitiator.html#method-i-add_streamhost","(streamhost)","<p>Add a streamhost which will be offered to the target\n<p>streamhost &mdash; can be:\n\n<p><p>StreamHost &mdash; if already got all information …\n"],["add_streamhost_callback","Jabber::Bytestreams::SOCKS5Bytestreams","Jabber/Bytestreams/SOCKS5Bytestreams.html#method-i-add_streamhost_callback","(priority = 0, ref = nil, &block)","<p>Add a callback that will be called when there is action regarding SOCKS\nstream-hosts\n<p>Usage of this callback …\n"],["add_subscription_callback","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-add_subscription_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for subscription updates, which will be called upon\nreceiving a <code>&lt;presence/&gt;</code> stanza …\n"],["add_subscription_request_callback","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-add_subscription_request_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for subscription requests, which will be called upon\nreceiving a <code>&lt;presence type='subscribe'/&gt;</code> …\n"],["add_update_callback","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-add_update_callback","(prio = 0, ref = nil, &block)","<p>Add a callback for Jabber::Roster::Helper::RosterItem updates\n<p>Note that this will be called much after …\n"],["add_usertune_callback","Jabber::UserTune::Helper","Jabber/UserTune/Helper.html#method-i-add_usertune_callback","(prio = 200, ref = nil, &block)","<p>Add a callback that will be invoked when a tune is received from the jid\nspecified when you constructed …\n"],["add_version_callback","Jabber::Version::Responder","Jabber/Version/Responder.html#method-i-add_version_callback","(priority = 0, ref = nil, &block)","<p>Add a callback for Iq stanzas with IqQueryVersion\n<p>First argument passed to block is the Iq stanza, second …\n"],["add_xml_callback","Jabber::Stream","Jabber/Stream.html#method-i-add_xml_callback","(priority = 0, ref = nil, &block)","<p>Adds a callback block to process received XML messages\n<p>priority &mdash; <p>Integer &mdash; The callback’s priority, the higher, …\n\n"],["affiliation","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-affiliation","()",""],["affiliation=","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-affiliation-3D","(v)",""],["after_reopen","File::Tail","File/Tail.html#method-i-after_reopen","(&block)","<p>The callback is called with <em>self</em> as an argument after a reopen has\noccured. This allows a tailing script …\n"],["answer","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-answer","(import=true)","<p>Compose a response of this XMPPStanza (see XMPPStanza.answer)\n<p>result &mdash; <p>XMPPStanza &mdash; New constructed stanza …\n\n\n"],["answer","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-c-answer","(xmppstanza, import=true)","<p>Compose a response by doing the following:\n<p>Create a new XMPPStanza of the same subclass with the same …\n"],["artist","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-artist","()","<p>Get the artist for this tune.\n"],["ask","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-ask","()","<p>Get if asking for subscription\n<p>result &mdash; <p>Symbol &mdash; nil or :subscribe\n\n\n"],["ask=","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-ask-3D","(val)","<p>Set if asking for subscription\n<p>val &mdash; <p>Symbol &mdash; nil or :subscribe\n\n\n"],["auth","Jabber::Bytestreams::SOCKS5Socket","Jabber/Bytestreams/SOCKS5Socket.html#method-i-auth","()","<p>Authenticate for SOCKS5 proxy\n<p>Currently supports only ‘no authentication required’\n"],["auth","Jabber::Client","Jabber/Client.html#method-i-auth","(password)","<p>Authenticate with the server\n<p>Throws ClientAuthenticationFailure\n<p>Authentication mechanisms are used in the …\n"],["auth","Jabber::Component","Jabber/Component.html#method-i-auth","(secret)","<p>Send auth with given secret and wait for result\n<p>Throws ComponentAuthenticationFailure\n<p>secret &mdash; <p>String &mdash; the …\n"],["auth","Jabber::SASL::Anonymous","Jabber/SASL/Anonymous.html#method-i-auth","(password)","<p>Authenticate by sending nothing with the ANONYMOUS token\n"],["auth","Jabber::SASL::DigestMD5","Jabber/SASL/DigestMD5.html#method-i-auth","(password)","<p>Send a response\n<p>Wait for the server’s challenge (which aren’t checked)\n<p>Send a blind response to the server’s …\n"],["auth","Jabber::SASL::Plain","Jabber/SASL/Plain.html#method-i-auth","(password)","<p>Authenticate via sending password in clear-text\n"],["auth_anonymous","Jabber::Client","Jabber/Client.html#method-i-auth_anonymous","()","<p>See Client#auth_anonymous_sasl\n"],["auth_anonymous_sasl","Jabber::Client","Jabber/Client.html#method-i-auth_anonymous_sasl","()","<p>Shortcut for anonymous connection to server\n<p>Throws ClientAuthenticationFailure\n"],["auth_nonsasl","Jabber::Client","Jabber/Client.html#method-i-auth_nonsasl","(password, digest=true)","<p>Send auth with given password and wait for result (non-SASL)\n<p>Throws ServerError\n<p>password &mdash; <p>String &mdash; the password …\n"],["auth_sasl","Jabber::Client","Jabber/Client.html#method-i-auth_sasl","(sasl, password)","<p>Use a SASL authentication mechanism and bind to a resource\n<p>If there was no resource given in the jid, …\n"],["backward","File::Tail","File/Tail.html#method-i-backward","(n = 0, bufsiz = nil)","<p>Rewind the last <code>n</code> lines of this file, starting from the end.\nThe default is to start tailing directly …\n"],["ban","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-ban","(recipients, reason)","<p>Administratively ban one or more user jids from the room.\n<p>Will wait for response, possibly raising ServerError …\n"],["bare","Jabber::JID","Jabber/JID.html#method-i-bare","()",""],["bare!","Jabber::JID","Jabber/JID.html#method-i-bare-21","()",""],["bared?","Jabber::JID","Jabber/JID.html#method-i-bared-3F","()",""],["body","Jabber::Message","Jabber/Message.html#method-i-body","()","<p>Returns the message’s body, or nil. This is the message’s plain-text\ncontent.\n"],["body","Jabber::XHTML::HTML","Jabber/XHTML/HTML.html#method-i-body","()","<p>Get first XHTML::Body child\n"],["body=","Jabber::Message","Jabber/Message.html#method-i-body-3D","(b)","<p>Sets the message’s body\n<p>b &mdash; <p>String &mdash; body to set\n\n\n"],["body=","Jabber::XHTML::HTML","Jabber/XHTML/HTML.html#method-i-body-3D","(body)","<p>Replace first XHTML::Body child\n"],["c","Jabber::Caps::Helper","Jabber/Caps/Helper.html#method-i-c","()","<p>Return a &lt;c/&gt; element for inclusion in your own &lt;presence&gt;\nstanzas.\n"],["call","Jabber::RPC::Client","Jabber/RPC/Client.html#method-i-call","(method, *args)",""],["call","Jabber::Stream::ThreadBlock","Jabber/Stream/ThreadBlock.html#method-i-call","(*args)",""],["call2","Jabber::RPC::Client","Jabber/RPC/Client.html#method-i-call2","(method, *args)",""],["can_range?","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-can_range-3F","()",""],["can_range?","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-can_range-3F","()","<p>Does implement the methods seek and length= ?\n<p>FileTransfer will only then offer a ranged transfer.\n<p>result … &mdash; "],["cancel_subscription","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-cancel_subscription","()","<p>Deny the contact to see your presence.\n<p>This method will not wait and returns immediately as you will need …\n"],["category","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-category","()","<p>Get the identity’s category or nil\n<p>result &mdash; <p>String &mdash; \n\n"],["category","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-i-category","(jid,node)","<p>get category of node\n<p>jid &mdash; <p>Jabber::JID &mdash; \n<p>node &mdash; <p>String &mdash; \n\n"],["category=","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-category-3D","(val)","<p>Set the identity’s category\n<p>Service Discovery categories should be somewhat standardized by some\nregistry, …\n"],["check_for_offenders","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-check_for_offenders","(address)",""],["class_for_name_xmlns","Jabber::XMPPElement","Jabber/XMPPElement.html#method-c-class_for_name_xmlns","(name, xmlns)","<p>Find a class for given name and namespace\n<p>name &mdash; <p>String &mdash; \n<p>xmlns &mdash; <p>String &mdash; \n<p>result &mdash; A descendant of XMPPElement …\n\n"],["clean_old_addrs","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-clean_old_addrs","()",""],["clean_old_data","EmailStats","EmailStats.html#method-i-clean_old_data","()","<p>Purge the @data hash of data older than 2 months + the “recent” time\nperiod.\n"],["client","Jabber::Simple","Jabber/Simple.html#method-i-client","()","<p>Direct access to the underlying Jabber client.\n"],["clone","Jabber::XMPPElement","Jabber/XMPPElement.html#method-i-clone","()",""],["close","Jabber::Bytestreams::IBB","Jabber/Bytestreams/IBB.html#method-i-close","()","<p>Close the stream\n<p>Waits for acknowledge from peer, may throw ServerError\n"],["close","Jabber::Bytestreams::SOCKS5Bytestreams","Jabber/Bytestreams/SOCKS5Bytestreams.html#method-i-close","()","<p>Close the stream-host connection\n"],["close","Jabber::Client","Jabber/Client.html#method-i-close","()","<p>Close the connection, sends <code>&lt;/stream:stream&gt;</code> tag first\n"],["close","Jabber::Component","Jabber/Component.html#method-i-close","()","<p>Close the connection, sends <code>&lt;/stream:stream&gt;</code> tag first\n"],["close","Jabber::HTTPBinding::Client","Jabber/HTTPBinding/Client.html#method-i-close","()","<p>Close the session by sending &lt;presence type=‘unavailable’/&gt;\n"],["close","Jabber::Stream","Jabber/Stream.html#method-i-close","()","<p>Closes the connection to the Jabber service\n"],["close!","Jabber::Connection","Jabber/Connection.html#method-i-close-21","()","<p>Closing connection: first kill keepaliveThread, then call Stream#close!\n"],["close!","Jabber::Stream","Jabber/Stream.html#method-i-close-21","()",""],["cmp_interest","Jabber::Presence","Jabber/Presence.html#method-i-cmp_interest","(o)",""],["code","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-code","()","<p>Get the ‘Legacy error code’ or nil\n<p>result &mdash; <p>Integer &mdash; Error code\n\n\n"],["code=","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-code-3D","(i)","<p>Set the ‘Legacy error code’ or nil\n<p>i &mdash; <p>Integer &mdash; Error code\n\n\n"],["command","Jabber::Iq","Jabber/Iq.html#method-i-command","()","<p>Returns the iq’s &lt;command/&gt; child, or nil\n<p>resulte &mdash; <p>IqCommand &mdash; \n\n"],["configure","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-configure","(options={})","<p>Use this method to configure a MUC room of which you are the owner.\n<p>options &mdash; <p>Hash &mdash; where keys are the features …\n\n\n"],["connect","Jabber::Client","Jabber/Client.html#method-i-connect","(host = nil, port = 5222)","<p>connect to the server (chaining-friendly)\n<p>If you omit the optional host argument SRV records for your …\n"],["connect","Jabber::Component","Jabber/Component.html#method-i-connect","(server=nil, port=5347)","<p>Connect to the server (chaining-friendly)\n<p>server &mdash; <p>String &mdash; Hostname\n\n<p>port &mdash; <p>Integer &mdash; TCP port (5347)\n"],["connect","Jabber::Connection","Jabber/Connection.html#method-i-connect","(host, port)","<p>Connect to the Jabber server through a TCP Socket, start the Jabber parser,\ninvoke to accept_features …\n"],["connect","Jabber::HTTPBinding::Client","Jabber/HTTPBinding/Client.html#method-i-connect","(uri, host=nil, port=5222)","<p>Set up the stream using uri as the HTTP Binding URI\n<p>You may optionally pass host and port parameters to …\n"],["connect_domain","Jabber::Bytestreams::SOCKS5Socket","Jabber/Bytestreams/SOCKS5Socket.html#method-i-connect_domain","(domain, port)","<p>Issue a CONNECT request to a host name which is to be resolved by the\nproxy.\n<p>domain &mdash; <p>String &mdash; Host name\n\n<p>port … &mdash; "],["connected?","Jabber::Simple","Jabber/Simple.html#method-i-connected-3F","()","<p>Returns true if the Jabber client is connected to the Jabber server, false\notherwise.\n"],["contacts","Jabber::Simple","Jabber/Simple.html#method-i-contacts","(*contacts, &block)","<p>If contacts is a single contact, returns a Jabber::Contact object\nrepresenting that user; if contacts …\n"],["contents=","Jabber::XHTML::HTML","Jabber/XHTML/HTML.html#method-i-contents-3D","(contents)","<p>Set contents of this HTML document. The “contents” parameter can be:\n<p>An Array of REXML::Element …\n"],["continue","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-continue","()",""],["continue","Jabber::MUC::XMUCUserItem","Jabber/MUC/XMUCUserItem.html#method-i-continue","()",""],["continue=","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-continue-3D","(c)",""],["continue=","Jabber::MUC::XMUCUserItem","Jabber/MUC/XMUCUserItem.html#method-i-continue-3D","(c)",""],["create_collection_node","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-create_collection_node","(node = nil, configure = Jabber::PubSub::NodeConfig.new)","<p>Create a new collection node on the pubsub service\n<p>node &mdash; <p>String &mdash; the node name - otherwise you get an automatically …\n\n"],["create_node","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-create_node","(configuration = Jabber::PubSub::NodeConfig.new)","<p>creates the node create(configuration=nil)\n<p>configuration &mdash; <p>Jabber::XData &mdash; \n\n"],["create_node","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-create_node","(node = nil, configure = Jabber::PubSub::NodeConfig.new)","<p>Create a new node on the pubsub service\n<p>node &mdash; <p>String &mdash; the node name - otherwise you get a automatically …\n\n"],["current_day","EmailStats","EmailStats.html#method-i-current_day","()",""],["current_line","REXML::IOSource","REXML/IOSource.html#method-i-current_line","()",""],["current_month","EmailStats","EmailStats.html#method-i-current_month","()",""],["daemonize","Pidify","Pidify.html#method-c-daemonize","(options={})","<p>Daemonizes this process.  Does not automatically use a PID file.  If you\nwant to use a PID file, you …\n"],["data","Jabber::Bytestreams::IBBQueueItem","Jabber/Bytestreams/IBBQueueItem.html#method-i-data","()","<p>Return the Base64-<strong>decoded</strong> data\n<p>There’s no need to catch Exceptions here, as none are thrown.\n"],["data_file","EmailStats","EmailStats.html#method-i-data_file","(month=current_month)",""],["date","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-date","()","<p>Get file date\n<p>result &mdash; <p>Time &mdash; or nil\n\n\n"],["date","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-date","()",""],["date","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-date","()","<p>Date of the offered file, can be nil\n"],["date=","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-date-3D","(d)","<p>Set file date\n<p>d &mdash; <p>Time &mdash; or nil\n\n\n"],["debug","Jabber","Jabber.html#method-c-debug","()","<p>returns true if debugging mode is enabled. If you just want to log\nsomething if debugging is enabled, …\n"],["debug=","Jabber","Jabber.html#method-c-debug-3D","(debug)","<p>Enable/disable debugging mode. When debug mode is enabled, information can\nbe logged using Jabber::debuglog …\n"],["debug?","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-debug-3F","()",""],["debug_message","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-debug_message","(text)",""],["debug_message","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-debug_message","(text,include_filename=nil)","<p>Log a debug message.\n"],["debuglog","Jabber","Jabber.html#method-c-debuglog","(string)","<p>Outputs a string only if debugging mode is enabled. If the string includes\nseveral lines, 4 spaces are …\n"],["decline","Jabber::FileTransfer::Helper","Jabber/FileTransfer/Helper.html#method-i-decline","(iq)","<p>Decline an incoming file-transfer, to be used in a block given to\nadd_incoming_callback\n<p>iq &mdash; <p>Iq &mdash; of file-transfer …\n\n\n"],["decline_subscription","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-decline_subscription","(jid)","<p>Decline a subscription request\n<p>Sends a &lt;presence type=‘unsubscribed’/&gt; stanza\n\n"],["decode64","Base64","Base64.html#method-c-decode64","(data64)","<p>Decode a Base64-encoded String\n<p>data64 &mdash; <p>String &mdash; Binary in Base64\n\n<p>result &mdash; <p>String &mdash; Binary\n"],["decode_challenge","Jabber::SASL::DigestMD5","Jabber/SASL/DigestMD5.html#method-i-decode_challenge","(challenge)",""],["delete","Jabber::CallbackList","Jabber/CallbackList.html#method-i-delete","(ref)","<p>Delete a callback by reference\n<p>ref &mdash; <p>String &mdash; the reference of the callback to delete\n\n<p>return &mdash; <p>CallBackList &mdash; "],["delete_elements","REXML::Element","REXML/Element.html#method-i-delete_elements","(element)","<p>Deletes one or more children elements, not just one like\nREXML::Element#delete_element\n"],["delete_iq_callback","Jabber::Stream","Jabber/Stream.html#method-i-delete_iq_callback","(ref)","<p>Delete an Iq callback\n<p>ref &mdash; <p>String &mdash; The reference of the callback to delete\n\n\n"],["delete_message_callback","Jabber::Stream","Jabber/Stream.html#method-i-delete_message_callback","(ref)","<p>Delete an Message callback\n<p>ref &mdash; <p>String &mdash; The reference of the callback to delete\n\n\n"],["delete_node","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-delete_node","()","<p>deletes the node delete\n"],["delete_node","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-delete_node","(node)","<p>Delete a pubsub node\n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; true\n\n"],["delete_pid","Pidify","Pidify.html#method-c-delete_pid","()","<p>Deletes the PID file.  Calling stop calls this automatically, but will also\ntry to send a kill signal …\n"],["delete_presence_callback","Jabber::Stream","Jabber/Stream.html#method-i-delete_presence_callback","(ref)","<p>Delete a Presence callback\n<p>ref &mdash; <p>String &mdash; The reference of the callback to delete\n\n\n"],["delete_stanza_callback","Jabber::Stream","Jabber/Stream.html#method-i-delete_stanza_callback","(ref)","<p>Delete a Stanza callback\n<p>ref &mdash; <p>String &mdash; The reference of the callback to delete\n\n\n"],["delete_xml_callback","Jabber::Stream","Jabber/Stream.html#method-i-delete_xml_callback","(ref)","<p>Delete an XML-messages callback\n<p>ref &mdash; <p>String &mdash; The reference of the callback to delete\n\n\n"],["deliver","Jabber::Simple","Jabber/Simple.html#method-i-deliver","(jid, message, type=:chat)","<p>Send a message to jabber user jid.\n<p>Valid message types are:\n\n<pre>* :normal (default): a normal message.\n* :chat: ...</pre>\n"],["deliver_deferred","Jabber::Simple","Jabber/Simple.html#method-i-deliver_deferred","(jid, message, type)","<p>Queue messages for delivery once a user has accepted our authorization\nrequest. Works in conjunction …\n"],["demote","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-demote","(recipients)","<p>Demote one or more users in the room to participant.\n<p>Will wait for response, possibly raising ServerError …\n"],["description","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-description","()","<p>File description\n"],["description=","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-description-3D","(s)","<p>Set file description\n"],["disconnect","Jabber::Simple","Jabber/Simple.html#method-i-disconnect","()","<p>Use this to force the client to disconnect and not automatically reconnect.\n"],["do_rpc","Jabber::RPC::Client","Jabber/RPC/Client.html#method-i-do_rpc","(xmlrpc)",""],["do_subscribe","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-do_subscribe","()","<p>subscribe to this node do_subscribe\n"],["do_unsubscribe","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-do_unsubscribe","(subid)","<p>unsubscribe from this node do_unsubscribe(subid = nil)\n<p>subid &mdash; <p>String &mdash; \n\n"],["domain","Jabber::JID","Jabber/JID.html#method-i-domain","()","<p>Get the JID’s domain\n"],["domain=","Jabber::JID","Jabber/JID.html#method-i-domain-3D","(v)","<p>Set the JID’s domain\n"],["each","Jabber::Roster::IqQueryRoster","Jabber/Roster/IqQueryRoster.html#method-i-each","(&block)","<p>Iterate through all items\n<p>&amp;block &mdash; Yield for every [RosterItem]\n\n"],["each_presence","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-each_presence","(&block)","<p>Iterate through all received <code>&lt;presence/&gt;</code> stanzas\n"],["each_streamhost","Jabber::Bytestreams::SOCKS5BytestreamsServer","Jabber/Bytestreams/SOCKS5BytestreamsServer.html#method-i-each_streamhost","(my_jid, &block)","<p>Iterate through all configured addresses, yielding\nSOCKS5BytestreamsServerStreamHost instances, which …\n"],["empty?","Jabber::JID","Jabber/JID.html#method-i-empty-3F","()","<p>Test if jid is empty\n"],["encode64","Base64","Base64.html#method-c-encode64","(data)","<p>Encode a String\n<p>data &mdash; <p>String &mdash; Binary\n\n<p>result &mdash; <p>String &mdash; Binary in Base64\n"],["ensure_emails_are_sent?","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-ensure_emails_are_sent-3F","()","<p>Returns true if ensure_emails_are_sent is set to true on this plugin which\nwill make sure that if the …\n"],["ensure_one_pending_request","Jabber::HTTPBinding::Client","Jabber/HTTPBinding/Client.html#method-i-ensure_one_pending_request","()","<p>Ensure that there is one pending request\n<p>Will be automatically called if you’ve sent a stanza.\n"],["eql?","Jabber::JID","Jabber/JID.html#method-i-eql-3F","(o)","<p>Ccompare to another JID\n<p>String representations are compared, see JID#to_s\n"],["error","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-error","()","<p>Get the ‘XMPP error condition’\n<p>This can be anything that possess the specific namespace, checks don’t …\n"],["error","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-error","()","<p>Return the first <code>&lt;error/&gt;</code> child\n"],["error=","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-error-3D","(s)","<p>Set the ‘XMPP error condition’\n<p>One previous element with that namespace will be deleted before\n<p>s &mdash; <p>String … &mdash; "],["error_message","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-error_message","(text)",""],["error_message","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-error_message","(text,include_filename=nil)","<p>Log an error message.\n"],["escape","Jabber::JID","Jabber/JID.html#method-c-escape","(jid)","<p>Escape JID\n"],["event_type?","Jabber::PubSub::Event","Jabber/PubSub/Event.html#method-i-event_type-3F","()","<p>return the payload type\n"],["every_line","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-every_line","(line)",""],["every_line","AtMailPlugin","AtMailPlugin.html#method-i-every_line","(line)",""],["every_line","BlacklistPlugin","BlacklistPlugin.html#method-i-every_line","(line)",""],["every_line","CGPClamAVCrash","CGPClamAVCrash.html#method-i-every_line","(line)",""],["every_line","CGPMcAfeeCounter","CGPMcAfeeCounter.html#method-i-every_line","(line)",""],["every_line","CGPMcAfeeSparkwatcher","CGPMcAfeeSparkwatcher.html#method-i-every_line","(line)",""],["every_line","CGPSpamCatcherCounter","CGPSpamCatcherCounter.html#method-i-every_line","(line)",""],["every_line","CGPSpamCatcherRestart","CGPSpamCatcherRestart.html#method-i-every_line","(line)",""],["every_line","CorruptedMailbox","CorruptedMailbox.html#method-i-every_line","(line)",""],["every_line","EmailStats","EmailStats.html#method-i-every_line","(line)",""],["every_line","FrequentSendersPlugin","FrequentSendersPlugin.html#method-i-every_line","(line)",""],["every_line","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-every_line","(line)",""],["every_line","MessageThrottleCounterPlugin","MessageThrottleCounterPlugin.html#method-i-every_line","(line)",""],["every_line","SendmailBlacklistPlugin","SendmailBlacklistPlugin.html#method-i-every_line","(line)",""],["every_line","SpoofedFromAddressPlugin","SpoofedFromAddressPlugin.html#method-i-every_line","(line)",""],["every_line","SyslogRemotePlugin","SyslogRemotePlugin.html#method-i-every_line","(line)",""],["every_line","TestPlugin","TestPlugin.html#method-i-every_line","(line)",""],["every_minute","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-every_minute","()",""],["every_minute","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-every_minute","()",""],["every_minute","TestPlugin","TestPlugin.html#method-i-every_minute","()",""],["every_second","CheckSize","CheckSize.html#method-i-every_second","()",""],["exit","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-exit","(reason=nil)","<p>Exit the room\n<p>Sends presence with type=‘unavailable’ with an optional reason in\n<code>&lt;status/&gt;</code>,\n<p>then waits …\n"],["feature","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-feature","()","<p>&lt;feature/&gt; child\n<p>result &mdash; <p>IqFeature &mdash; \n\n"],["features","Jabber::Discovery::IqQueryDiscoInfo","Jabber/Discovery/IqQueryDiscoInfo.html#method-i-features","()","<p>Get list of features\n<p>result &mdash; <p>Array &mdash; of [String]\n\n\n"],["field","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-field","(var)","<p>Search a field by it’s var-name\n<p>var &mdash; <p>String &mdash; \n<p>result &mdash; <p>XDataField &mdash; or [nil]\n\n\n"],["fields","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-fields","(including_hidden=false)",""],["fields","Jabber::Vcard::IqVcard","Jabber/Vcard/IqVcard.html#method-i-fields","()","<p>Get vCard field names\n<p>Example:\n\n<pre>[&quot;NICKNAME&quot;, &quot;BDAY&quot;, &quot;ORG/ORGUNIT&quot;, &quot;PHOTO/TYPE&quot;, &quot;PHOTO/BINVAL&quot;]</pre>\n"],["file","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-file","()","<p>&lt;file/&gt; child\n<p>result &mdash; <p>IqSiFile &mdash; \n\n"],["filename","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-filename","()",""],["filename","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-filename","()","<p>Filename of the offered file\n"],["find","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-find","(jid)","<p>Returns the list of RosterItems which, stripped, are equal to the one you\nare looking for.\n"],["find_by_group","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-find_by_group","(group)","<p>Get items in a group\n<p>When group is nil, return ungrouped items\n<p>group &mdash; <p>String &mdash; Group name\n"],["first_element","REXML::Element","REXML/Element.html#method-i-first_element","(e)","<p>Returns first element of name <code>e</code>\n"],["first_element_text","REXML::Element","REXML/Element.html#method-i-first_element_text","(e)","<p>Returns text of first element of name <code>e</code>\n"],["flush","Jabber::Bytestreams::IBB","Jabber/Bytestreams/IBB.html#method-i-flush","()","<p>Empty the send-buffer by sending remaining data\n"],["flush","Jabber::Bytestreams::SOCKS5Bytestreams","Jabber/Bytestreams/SOCKS5Bytestreams.html#method-i-flush","()","<p>Flush the SOCKS5 socket\n"],["fname","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-fname","()","<p>Get filename (attribute ‘name’)\n"],["fname=","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-fname-3D","(s)","<p>Set filename (attribute ‘name’)\n"],["force_xmlns","Jabber::XMPPElement","Jabber/XMPPElement.html#method-c-force_xmlns","(force)","<p>Set whether this element is always built with an xmlns attribute\n"],["force_xmlns?","Jabber::XMPPElement","Jabber/XMPPElement.html#method-c-force_xmlns-3F","()","<p>Whether this element is always built with an xmlns attribute\n"],["form","Jabber::PubSub::Configuration","Jabber/PubSub/Configuration.html#method-i-form","()","<p>get the underlying XData form element\n"],["form=","Jabber::PubSub::Configuration","Jabber/PubSub/Configuration.html#method-i-form-3D","(form)",""],["form_type","Jabber::PubSub::Configuration","Jabber/PubSub/Configuration.html#method-i-form_type","()","<p>Implemented by NodeConfig and SubscriptionConfig\n"],["forward","File::Tail","File/Tail.html#method-i-forward","(n = 0)","<p>Skip the first <code>n</code> lines of this file. The default is to don’t\nskip any lines at all and start at the beginning …\n"],["from","Jabber::Delay::XDelay","Jabber/Delay/XDelay.html#method-i-from","()","<p>Get the timestamp’s origin\n<p>result &mdash; <p>JID &mdash; \n\n"],["from","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-from","()",""],["from","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-from","()","<p>get the from attribute\n<p>return &mdash; <p>String &mdash; the element’s from attribute\n\n\n"],["from=","Jabber::Delay::XDelay","Jabber/Delay/XDelay.html#method-i-from-3D","(jid)","<p>Set the timestamp’s origin\n<p>jid &mdash; <p>JID &mdash; \n\n"],["from=","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-from-3D","(j)",""],["from=","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-from-3D","(v)","<p>set the from attribute\n<p>v &mdash; <p>String &mdash; the value from set\n\n\n"],["from_room?","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-from_room-3F","(jid)","<p>Does this JID belong to that room?\n<p>jid &mdash; <p>JID &mdash; \n<p>result &mdash; <p>true &mdash; or [false]\n\n\n"],["generate_caps","Jabber::Discovery::Responder","Jabber/Discovery/Responder.html#method-i-generate_caps","()","<p>Generate a XEP-0115: Entity Capabilities &lt;c/&gt; element for inclusion\nin Presence stanzas. This enables …\n"],["generate_id","Jabber::IdGenerator","Jabber/IdGenerator.html#method-c-generate_id","()","<p>Generate an unique ID.\n<p>This is kind of boring this way, as it just counts up a number. Maybe\nsomething …\n"],["generate_id","Jabber::IdGenerator","Jabber/IdGenerator.html#method-i-generate_id","()",""],["generate_item","Jabber::Discovery::Responder","Jabber/Discovery/Responder.html#method-i-generate_item","()","<p>Generate an item for inclusion in items discovery in other responders\n<p>return &mdash; <p>Discovery::Item &mdash; or nil\n\n\n"],["generate_ver","Jabber::Caps","Jabber/Caps.html#method-c-generate_ver","(identities, features, forms=[], hash='sha-1')","<p>Implementation of the algorithm defined at:\nwww.xmpp.org/extensions/xep-0115.html#ver-gen\n"],["generate_ver_from_discoinfo","Jabber::Caps","Jabber/Caps.html#method-c-generate_ver_from_discoinfo","(query, hash='sha-1')","<p>Generate a ver hash from a Jabber::Discovery::IqQueryDiscoInfo result\n<p>query &mdash; <p>Jabber::Discovery::IqQueryDiscoInfo … &mdash; \n\n"],["generate_ver_str","Jabber::Caps","Jabber/Caps.html#method-c-generate_ver_str","(identities, features, forms=[])",""],["get","Jabber::Vcard::Helper","Jabber/Vcard/Helper.html#method-i-get","(jid=nil)","<p>Retrieve vCard of an entity\n<p>Raises exception upon retrieval error, please catch that! (The exception is\n…\n"],["get","Jabber::Vcard::Helper","Jabber/Vcard/Helper.html#method-c-get","(stream, jid=nil)","<p>Quickly initialize a Vcard helper and get a vCard. See Vcard#get\n"],["get_MX_server","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-get_MX_server","(domain)",""],["get_affiliations","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-get_affiliations","()","<p>get all node affiliations get_affiliations\n"],["get_affiliations","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-get_affiliations","(node = nil)","<p>shows the affiliations on a pubsub service\n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; <p>Hash &mdash; of { node =&gt; symbol }\n\n\n"],["get_all_items","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-get_all_items","()","<p>gets all items from the node get_all_items\n"],["get_config_from","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-get_config_from","(node)","<p>get configuration from a node\n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; <p>Jabber::PubSub::Configure &mdash; \n\n"],["get_configuration","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-get_configuration","(subid = nil)","<p>get the configuration of the node get_configuration(configuration=nil)\n<p>configuration &mdash; <p>Jabber::XData &mdash; \n\n"],["get_info","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-i-get_info","(jid,node)","<p>get disco info for a node\n<p>jid &mdash; <p>Jabber::JID &mdash; \n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; <p>Hash &mdash; <p>with possible keys type &mdash; <p>String &mdash; <p>,category … &mdash; "],["get_items","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-get_items","(count)","<p>get a count of items get_items(count)\n<p>count &mdash; <p>Fixnum &mdash; \n\n"],["get_items_from","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-get_items_from","(node, count=nil)","<p>gets all items from a pubsub node\n<p>node &mdash; <p>String &mdash; \n<p>count &mdash; <p>Fixnum &mdash; \n<p>return &mdash; <p>Hash &mdash; { id =&gt; [Jabber::PubSub::Item] …\n\n\n"],["get_metadata","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-i-get_metadata","(jid,node)","<p>this is only for a xep &lt;-&gt; nodebrowser.rb understanding\n"],["get_node","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-get_node","()","<p>Return the name of the node we’re currently looking at, if we can find  it.\nOtherwise return ‘unknown’. …\n"],["get_node","CGPClamAVCrash","CGPClamAVCrash.html#method-i-get_node","()",""],["get_node","CGPMcAfeeCounter","CGPMcAfeeCounter.html#method-i-get_node","()",""],["get_node","CGPMcAfeeSparkwatcher","CGPMcAfeeSparkwatcher.html#method-i-get_node","()",""],["get_node","CGPSpamCatcherCounter","CGPSpamCatcherCounter.html#method-i-get_node","()",""],["get_node","CorruptedMailbox","CorruptedMailbox.html#method-i-get_node","()",""],["get_node","SyslogRemotePlugin","SyslogRemotePlugin.html#method-i-get_node","()",""],["get_options_from","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-get_options_from","(node, jid, subid = nil)","<p>get options from a subscription\n<p>node &mdash; <p>String &mdash; \n<p>jid &mdash; <p>Jabber::JID &mdash; or [String]\n\n<p>subid &mdash; <p>String &mdash; or nil\n"],["get_response","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-get_response","()",""],["get_room_configuration","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-get_room_configuration","()",""],["get_subscribers","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-get_subscribers","()","<p>get all subscribers subscribed on this node get_subscribers\n"],["get_subscribers_from","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-get_subscribers_from","(node)","<p>shows all jids of subscribers of a node\n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; <p>Array &mdash; of [String]\n\n\n"],["get_subscriptions","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-get_subscriptions","()","<p>get all subscriptions on this node get_subscriptions\n"],["get_subscriptions_from","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-get_subscriptions_from","(node)","<p>shows all subscriptions on the given node\n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; <p>Array &mdash; of [Jabber::Pubsub::Subscription]\n\n\n"],["get_subscriptions_from_all_nodes","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-get_subscriptions_from_all_nodes","()","<p>get all subscriptions on a pubsub component\n<p>return &mdash; <p>Hash &mdash; of [PubSub::Subscription]\n\n\n"],["groups","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-groups","()","<p>Groups in this Roster, sorted by name\n<p>Contains <code>nil</code> if there are ungrouped items\n<p>result &mdash; <p>Array &mdash; containing …\n"],["groups","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-groups","()","<p>Get groups the item belongs to\n<p>result &mdash; <p>Array &mdash; of [String] The groups\n\n\n"],["groups","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-groups","()","<p>Get groups the item belongs to\n<p>result &mdash; <p>Array &mdash; of [String] The groups\n\n\n"],["groups=","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-groups-3D","(ary)","<p>Set groups the item belongs to, deletes old groups first.\n<p>See JEP 0083 for nested groups\n<p>ary &mdash; <p>Array &mdash; New …\n"],["groups=","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-groups-3D","(ary)","<p>Set groups the item belongs to, deletes old groups first.\n<p>See JEP 0083 for nested groups\n<p>ary &mdash; <p>Array &mdash; New …\n"],["handle_discoinfo_query","Jabber::Caps::Helper","Jabber/Caps/Helper.html#method-i-handle_discoinfo_query","(iq)","<p>Send actual identities/ features back to a requesting entity\n"],["handle_iq","Jabber::RPC::Server","Jabber/RPC/Server.html#method-i-handle_iq","(iq)","<p>handles incoming iqs\n<p>iq &mdash; <p>Jabber::IQ &mdash; <p>the jabber iq\n\n\n\n"],["hash","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-hash","()","<p>Get MD5 hash\n"],["hash","Jabber::Caps::C","Jabber/Caps/C.html#method-i-hash","()","<p>Get the value of this element’s ‘hash’ attribute, the algorithm used in\ngenerating the ‘ver’ attribute …\n"],["hash","Jabber::JID","Jabber/JID.html#method-i-hash","()","<p>Returns a hash value of the String representation (see JID#to_s)\n"],["hash=","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-hash-3D","(s)","<p>Set MD5 hash\n"],["helper","Jabber::Framework::Base","Jabber/Framework/Base.html#method-c-helper","(name, klass=nil, &factory)",""],["host","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-host","()","<p>Get the host address of the streamhost\n"],["host=","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-host-3D","(h)","<p>Set the host address of the streamhost\n"],["id","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-id","()","<p>Session ID of this stream\n"],["id","Jabber::PubSub::Item","Jabber/PubSub/Item.html#method-i-id","()",""],["id","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-id","()","<p>get the id attribute\n<p>return &mdash; <p>String &mdash; the element’s id attribute\n\n\n"],["id=","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-id-3D","(s)","<p>Set Session ID of this stream\n"],["id=","Jabber::PubSub::Item","Jabber/PubSub/Item.html#method-i-id-3D","(myid)",""],["id=","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-id-3D","(v)","<p>set the id attribute\n<p>v &mdash; <p>String &mdash; the value id set\n\n\n"],["identities","Jabber::Discovery::IqQueryDiscoInfo","Jabber/Discovery/IqQueryDiscoInfo.html#method-i-identities","()","<p>Get list of identities\n<p>result &mdash; <p>Array &mdash; of [Identity]\n\n\n"],["identity","Jabber::Discovery::IqQueryDiscoInfo","Jabber/Discovery/IqQueryDiscoInfo.html#method-i-identity","()","<p>Get the first identity child\n<p>result &mdash; <p>Identity &mdash; \n\n"],["import","Jabber::XMPPElement","Jabber/XMPPElement.html#method-c-import","(element)","<p>Import another REXML::Element descendant to:\n<p>Either an element class that registered with name and xmlns …\n"],["import","REXML::Element","REXML/Element.html#method-c-import","(xmlelement)",""],["import","REXML::Element","REXML/Element.html#method-i-import","(xmlelement)","<p>import this element’s children and attributes\n"],["iname","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-iname","()","<p>Get the identity’s name or nil\n<p>This has been renamed from &lt;name/&gt; to “iname” here to keep …\n"],["iname","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-iname","()","<p>Get the item’s name or nil\n<p>This has been renamed from &lt;name/&gt; to “iname” here to keep …\n"],["iname","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-iname","()","<p>Get name of roster item\n<p>names can be set by the roster’s owner himself\n<p>return &mdash; <p>String &mdash; \n\n"],["iname","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-iname","()","<p>Get name of roster item\n<p>names can be set by the roster’s owner himself\n<p>return &mdash; <p>String &mdash; \n\n"],["iname","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-iname","()","<p>Get the name of the software\n<p>This has been renamed to ‘iname’ here to keep REXML::Element#name\naccessible …\n"],["iname=","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-iname-3D","(val)","<p>Set the identity’s name\n<p>val &mdash; <p>String &mdash; \n\n"],["iname=","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-iname-3D","(val)","<p>Set the item’s name\n<p>val &mdash; <p>String &mdash; \n\n"],["iname=","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-iname-3D","(val)","<p>Set name of roster item\n<p>val &mdash; <p>String &mdash; Name for this item\n\n\n"],["iname=","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-iname-3D","(val)","<p>Set name of roster item\n<p>val &mdash; <p>String &mdash; Name for this item\n\n\n"],["iname=","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-iname-3D","(text)","<p>Set the name of the software\n<p>The element won’t be deleted if text is nil as it must occur in a version …\n"],["info_message","CGMonitor","CGMonitor.html#method-c-info_message","(text)",""],["info_message","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-info_message","(text)",""],["info_message","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-info_message","(text,include_filename=nil)","<p>Log an info message.\n"],["inspect","Jabber::Roster::IqQueryRoster","Jabber/Roster/IqQueryRoster.html#method-i-inspect","()","<p>Output for “p”\n<p>JIDs of all contained [RosterItem] elements are joined with a comma\n<p>result &mdash; <p>String … &mdash; \n\n"],["instructions","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-instructions","()","<p>Get the Data Form instructions\n<p>return &mdash; <p>Array &mdash; of [XDataInstructions] or nil\n\n\n"],["instructions","Jabber::Dataforms::XDataInstructions","Jabber/Dataforms/XDataInstructions.html#method-i-instructions","()",""],["instructions=","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-instructions-3D","(i)","<p>Add Data Form instructions\n<p>i &mdash; <p>String &mdash; \n\n"],["invite","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-invite","(recipients)","<p>Request the MUC to invite users to this room\n<p>Sample usage:\n\n<pre>my_muc.invite( {'wiccarocks@shakespeare.lit/laptop' ...</pre>\n"],["iq_callback","Jabber::Command::Responder","Jabber/Command/Responder.html#method-i-iq_callback","(iq)","<p>Handles &lt;iq&gt; stanzas and execute callbacks\n"],["iq_callback","Jabber::Version::Responder","Jabber/Version/Responder.html#method-i-iq_callback","(iq)","<p>&lt;iq/&gt; callback handler to answer Software Version queries (registered\nby constructor and used internally …\n"],["is_connected?","Jabber::Stream","Jabber/Stream.html#method-i-is_connected-3F","()","<p>Returns if this connection is connected to a Jabber service\n<p>return &mdash; <p>Boolean &mdash; Connection status\n\n\n"],["is_disconnected?","Jabber::Stream","Jabber/Stream.html#method-i-is_disconnected-3F","()","<p>Returns if this connection is NOT connected to a Jabber service\n<p>return &mdash; <p>Boolean &mdash; Connection status\n\n\n"],["is_tls?","Jabber::Connection","Jabber/Connection.html#method-i-is_tls-3F","()","<p>Have we gone to TLS mode?\n<p>result &mdash; <p>true &mdash; or [false]\n\n\n"],["items","Jabber::Discovery::IqQueryDiscoItems","Jabber/Discovery/IqQueryDiscoItems.html#method-i-items","()","<p>Get all item children\n<p>result &mdash; Array of [Discovery::Item]\n\n"],["items","Jabber::MUC::IqQueryMUCAdmin","Jabber/MUC/IqQueryMUCAdmin.html#method-i-items","()",""],["items","Jabber::MUC::XMUCUser","Jabber/MUC/XMUCUser.html#method-i-items","()","<p>Get all &lt;item/&gt; elements\n<p>result &mdash; <p>Array &mdash; of [XMUCUserItem]\n\n\n"],["items","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-i-items","(jid,node)","<p>Retrieve the items from a node Throws an ServerError when receiving\n<code>&lt;iq type='error'/&gt;</code>\n<p>jid &mdash; <p>Jabber::JID … &mdash; "],["jid","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-jid","()","<p>Get the JID of the streamhost\n"],["jid","Jabber::Bytestreams::StreamHostUsed","Jabber/Bytestreams/StreamHostUsed.html#method-i-jid","()",""],["jid","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-jid","()","<p>Get the item’s jid or nil\n<p>result &mdash; <p>String &mdash; \n\n"],["jid","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-jid","()",""],["jid","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-jid","()",""],["jid","Jabber::PubSub::SubscriptionConfig","Jabber/PubSub/SubscriptionConfig.html#method-i-jid","()","<p>get the ‘jid’ attribute for this stanza\n"],["jid","Jabber::PubSub::Unsubscribe","Jabber/PubSub/Unsubscribe.html#method-i-jid","()","<p>shows the jid\n<p>return &mdash; <p>String &mdash; \n\n"],["jid","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-jid","()","<p>Get JID of roster item Resource of the JID will <em>not</em> be stripped\n<p>return &mdash; <p>JID &mdash; \n\n"],["jid","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-jid","()","<p>Get JID of roster item Resource of the JID will <em>not</em> be stripped\n<p>return &mdash; <p>JID &mdash; \n\n"],["jid=","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-jid-3D","(j)","<p>Set the JID of the streamhost\n"],["jid=","Jabber::Bytestreams::StreamHostUsed","Jabber/Bytestreams/StreamHostUsed.html#method-i-jid-3D","(j)",""],["jid=","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-jid-3D","(val)","<p>Set the item’s jid\n<p>val &mdash; <p>JID &mdash; \n\n"],["jid=","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-jid-3D","(j)",""],["jid=","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-jid-3D","(myjid)",""],["jid=","Jabber::PubSub::SubscriptionConfig","Jabber/PubSub/SubscriptionConfig.html#method-i-jid-3D","(jid)","<p>set the ‘jid’ attribute of this stanza\n<p>jid &mdash; <p>Jabber::JID &mdash; or [String] the jid owning the subscription\n\n\n"],["jid=","Jabber::PubSub::Unsubscribe","Jabber/PubSub/Unsubscribe.html#method-i-jid-3D","(myjid)","<p>sets the jid\n<p>:: [Jabber::JID] or [String]\n"],["jid=","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-jid-3D","(val)","<p>Set JID of roster item\n<p>val &mdash; <p>JID &mdash; or nil\n\n\n"],["jid=","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-i-jid-3D","(val)","<p>Set JID of roster item\n<p>val &mdash; <p>JID &mdash; or nil\n\n\n"],["join","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-join","(jid, password=nil)","<p>Join a room\n<p>This registers its own callbacks on the stream provided to initialize and\nsends initial presence …\n"],["key_strings_to_symbols!","Hash","Hash.html#method-i-key_strings_to_symbols-21","()","<p>Recursively replace key names that should be symbols with symbols.\n"],["kick","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-kick","(recipients, reason)","<p>Administratively remove one or more users from the room.\n<p>Will wait for response, possibly raising ServerError …\n"],["label","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-label","()",""],["label=","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-label-3D","(s)",""],["length","Jabber::Bytestreams::IqSiFileRange","Jabber/Bytestreams/IqSiFileRange.html#method-i-length","()","<p>File length (if not to transfer whole file)\n"],["length","Jabber::CallbackList","Jabber/CallbackList.html#method-i-length","()","<p>Number of elements in the list\n<p>return &mdash; <p>Integer &mdash; The number of elements\n\n\n"],["length","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-length","()","<p>Get the length of this tune, in seconds.\n"],["length=","Jabber::Bytestreams::IqSiFileRange","Jabber/Bytestreams/IqSiFileRange.html#method-i-length-3D","(o)","<p>Set file length\n"],["length=","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-length-3D","(l)",""],["length=","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-length-3D","(l)","<p>Set the amount of data to send for ranged transfers\n"],["load_config","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-load_config","(config_file=nil)","<p>Load the configuration file and overwrite the options with its data.\n"],["load_my_options","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-load_my_options","()","<p>Loads any options in the cgmonitor YAML config file under the name of this\nplugin and stores them in …\n"],["logger","Jabber","Jabber.html#method-c-logger","()",""],["logger=","Jabber","Jabber.html#method-c-logger-3D","(logger)",""],["mark_time","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-mark_time","(label=:mark)","<p>Sets a time mark with a given label.  See time_since_mark and time_at_mark.\n"],["max_items","Jabber::PubSub::Items","Jabber/PubSub/Items.html#method-i-max_items","()",""],["max_items=","Jabber::PubSub::Items","Jabber/PubSub/Items.html#method-i-max_items-3D","(mymaxitems)",""],["md5","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-md5","()","<p>MD5-Sum of the offered file, can be nil\n"],["methodCall","XMLRPC::Create","XMLRPC/Create.html#method-i-methodCall","(name, *params)","<p>create a Method Call\n<p>name &mdash; <p>String &mdash; name of the method\n\n<p>params &mdash; <p>Array &mdash; params of the method as a array\n"],["methodResponse","XMLRPC::Create","XMLRPC/Create.html#method-i-methodResponse","(is_ret, *params)","<p>create a response to a method call\n<p>is_ret &mdash; <p>TrueClass &mdash; is this a return (true)  or a error (false)\n\n<p>params … &mdash; "],["method_missing","Jabber::RPC::Client","Jabber/RPC/Client.html#method-i-method_missing","(methodname, *args)","<p>automatically trys to find a method thanx to eric cestari  :)\n"],["mime","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-mime","()","<p>Everything is ‘application/octet-stream’\n"],["mime","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-mime","()","<p>Mime-type of the offered file, can be nil\n"],["mime_type","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-mime_type","()","<p>MIME type of this stream\n"],["mime_type=","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-mime_type-3D","(s)","<p>Set MIME type of this stream\n"],["mode","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-i-mode","()","<p>Transfer mode\n<p>result &mdash; :tcp or :udp\n\n"],["mode=","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-i-mode-3D","(m)","<p>Set the transfer mode\n<p>m &mdash; :tcp or :udp\n\n"],["most_recent_file","Pathname","Pathname.html#method-i-most_recent_file","(matching=/./)","<p>If this is a directory, returns the most recently modified  file in this\ndirectory. Otherwise, return …\n"],["muc_name","Jabber::MUC::MUCBrowser","Jabber/MUC/MUCBrowser.html#method-i-muc_name","(jid)","<p>Retrieve the name of a MUC component, depending upon whether the target\nentity supports the MUC protocol. …\n"],["muc_rooms","Jabber::MUC::MUCBrowser","Jabber/MUC/MUCBrowser.html#method-i-muc_rooms","(jid)","<p>Retrieve the existing rooms of a MUC component\n<p>The resulting Hash contains pairs of room JID and room …\n"],["multicall","Jabber::RPC::Client","Jabber/RPC/Client.html#method-i-multicall","(*methods)","<p>adds multi rpcalls to the query\n<p>methods &mdash; <p>Array &mdash; \n\n"],["multicall2","Jabber::RPC::Client","Jabber/RPC/Client.html#method-i-multicall2","(*methods)","<p>generate a multicall\n<p>methods &mdash; <p>Array &mdash; \n\n"],["name_xmlns","Jabber::XMPPElement","Jabber/XMPPElement.html#method-c-name_xmlns","(name, xmlns=nil)","<p>Specify XML element name and xmlns for a deriving class, this pair and the\nclass will be added to a global …\n"],["name_xmlns_for_class","Jabber::XMPPElement","Jabber/XMPPElement.html#method-c-name_xmlns_for_class","(klass)","<p>Find the name and namespace for a given class. This class must have\nregistered these two values by calling …\n"],["need_approval?","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-need_approval-3F","()",""],["new","CGMonitor::Monitor","CGMonitor/Monitor.html#method-c-new","(options={})",""],["new","CGMonitor::Plugin","CGMonitor/Plugin.html#method-c-new","(options)","<p>Don’t override this method.  Use start_up instead.\n"],["new","File::Tail::ReopenException","File/Tail/ReopenException.html#method-c-new","(mode = :bottom)","<p>Creates an ReopenException object. The mode defaults to\n<code>:bottom</code> which indicates that the file should …\n"],["new","Jabber::Bytestreams::IBB","Jabber/Bytestreams/IBB.html#method-c-new","(stream, session_id, my_jid, peer_jid)","<p>Create a new bytestream\n<p>Will register a &lt;message/&gt; callback to intercept data of this stream.\nThis …\n"],["new","Jabber::Bytestreams::IBBQueueItem","Jabber/Bytestreams/IBBQueueItem.html#method-c-new","(type, seq=nil, data_text='')",""],["new","Jabber::Bytestreams::IBBTarget","Jabber/Bytestreams/IBBTarget.html#method-c-new","(stream, session_id, initiator_jid, target_jid)",""],["new","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-c-new","(sid=nil, mode=nil)","<p>Initialize such a &lt;query/&gt;\n<p>sid &mdash; <p>String &mdash; Session-ID\n\n<p>mode &mdash; <p>Symbol &mdash; :tcp or :udp\n"],["new","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-c-new","(id=nil, profile=nil, mime_type=nil)",""],["new","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-c-new","(fname=nil, size=nil)",""],["new","Jabber::Bytestreams::IqSiFileRange","Jabber/Bytestreams/IqSiFileRange.html#method-c-new","(offset=nil, length=nil)",""],["new","Jabber::Bytestreams::SOCKS5Bytestreams","Jabber/Bytestreams/SOCKS5Bytestreams.html#method-c-new","(stream, session_id, initiator_jid, target_jid)",""],["new","Jabber::Bytestreams::SOCKS5BytestreamsInitiator","Jabber/Bytestreams/SOCKS5BytestreamsInitiator.html#method-c-new","(stream, session_id, initiator_jid, target_jid)",""],["new","Jabber::Bytestreams::SOCKS5BytestreamsPeer","Jabber/Bytestreams/SOCKS5BytestreamsPeer.html#method-c-new","(socket)","<p>Initialize a new peer\n<p>socket &mdash; <p>TCPSocket &mdash; \n\n"],["new","Jabber::Bytestreams::SOCKS5BytestreamsServer","Jabber/Bytestreams/SOCKS5BytestreamsServer.html#method-c-new","(port, listen_on=nil)","<p>Start a local SOCKS5BytestreamsServer\n<p>Will start to listen on the given TCP port and accept new peers …\n"],["new","Jabber::Bytestreams::SOCKS5BytestreamsServerStreamHost","Jabber/Bytestreams/SOCKS5BytestreamsServerStreamHost.html#method-c-new","(server, jid=nil, host=nil, port=nil)",""],["new","Jabber::Bytestreams::SOCKS5BytestreamsTarget","Jabber/Bytestreams/SOCKS5BytestreamsTarget.html#method-c-new","(stream, session_id, initiator_jid, target_jid)","<p>See SOCKS5Bytestreams#initialize\n"],["new","Jabber::Bytestreams::SOCKS5Socket","Jabber/Bytestreams/SOCKS5Socket.html#method-c-new","(socks_host, socks_port)","<p>Connect to SOCKS5 proxy\n"],["new","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-c-new","(jid=nil, host=nil, port=nil)","<p>Initialize a &lt;streamhost/&gt; element\n<p>jid &mdash; <p>JID &mdash; \n<p>host &mdash; <p>String &mdash; Hostname or IP address\n\n<p>port &mdash; <p>Fixnum &mdash; Port number …\n"],["new","Jabber::Bytestreams::StreamHostUsed","Jabber/Bytestreams/StreamHostUsed.html#method-c-new","(jid=nil)",""],["new","Jabber::Callback","Jabber/Callback.html#method-c-new","(priority = 0, ref = nil, block = Proc.new {})","<p>Create a new callback\n<p>priority &mdash; <p>Integer &mdash; the callback’s priority. The higher, the sooner it\n\n\n<p>will be executed …\n"],["new","Jabber::CallbackList","Jabber/CallbackList.html#method-c-new","()","<p>Create a new list of callbacks\n"],["new","Jabber::Caps::C","Jabber/Caps/C.html#method-c-new","(node = nil, ver = nil)",""],["new","Jabber::Caps::Helper","Jabber/Caps/Helper.html#method-c-new","(client,i=[],f=[],n=\"http://home.gna.org/xmpp4r/##{Jabber::XMPP4R_VERSION}\")","<p>Construct a new Caps Helper.\n<p>This will send a &lt;presence&gt; message containing a &lt;c/&gt;\n(Jabber::Caps::C …\n"],["new","Jabber::Client","Jabber/Client.html#method-c-new","(jid)","<p>Create a new Client.\n<p>Remember to <strong>always</strong> put a resource in your JID unless the\nserver can do SASL.\n"],["new","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-c-new","(node=nil, action=nil)",""],["new","Jabber::Command::Responder","Jabber/Command/Responder.html#method-c-new","(stream)","<p>Initialize a Responder\n"],["new","Jabber::Component","Jabber/Component.html#method-c-new","(jid, server_address=nil, server_port=5347)","<p>Create a new Component\n<p>jid &mdash; <p>JID &mdash; \n\n"],["new","Jabber::Connection","Jabber/Connection.html#method-c-new","()","<p>Create a new connection to the given host and port\n"],["new","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-c-new","(type=nil)",""],["new","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-c-new","(var=nil, type=nil)",""],["new","Jabber::Dataforms::XDataInstructions","Jabber/Dataforms/XDataInstructions.html#method-c-new","(instructions=nil)",""],["new","Jabber::Dataforms::XDataTitle","Jabber/Dataforms/XDataTitle.html#method-c-new","(title=nil)",""],["new","Jabber::Delay::XDelay","Jabber/Delay/XDelay.html#method-c-new","(insertnow=true)","<p>Initialize a new XDelay element\n<p>insertnow &mdash; <p>Boolean &mdash; Set the stamp to [Time::now]\n\n\n"],["new","Jabber::Discovery::Feature","Jabber/Discovery/Feature.html#method-c-new","(var=nil)","<p>Create a new &lt;feature/&gt; element\n<p>var &mdash; <p>String &mdash; New var\n\n\n"],["new","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-c-new","(category=nil, iname=nil, type=nil)","<p>Initialize a new Identity\n<p>category &mdash; <p>String &mdash; Initial category or nil\n\n<p>iname &mdash; <p>String &mdash; Initial identity name or …\n"],["new","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-c-new","(jid=nil, iname=nil, node=nil)","<p>Initialize a new Service Discovery &lt;item/&gt; to be added to\nIqQueryDiscoItems\n<p>jid &mdash; <p>JID &mdash; \n<p>iname &mdash; <p>String … &mdash; "],["new","Jabber::Discovery::Responder","Jabber/Discovery/Responder.html#method-c-new","(stream, node=nil, identities=[], features=[], items=[])","<p>Initialize responder for a specific node\n<p>stream &mdash; <p>Jabber::Stream &mdash; \n<p>node &mdash; <p>nil &mdash; or [String]\n\n\n"],["new","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-c-new","(errorcondition=nil, text=nil)","<p>errorcondition &mdash; <p>nil &mdash; or [String] of the following:\n\n\n<p>“bad-request”\n<p>“conflict”\n"],["new","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-c-new","(filename)",""],["new","Jabber::FileTransfer::Helper","Jabber/FileTransfer/Helper.html#method-c-new","(stream)","<p>Create a new FileTransfer instance\n"],["new","Jabber::Framework::Base","Jabber/Framework/Base.html#method-c-new","(stream)",""],["new","Jabber::Framework::Bot","Jabber/Framework/Bot.html#method-c-new","(jid, password)",""],["new","Jabber::HTTPBinding::Client","Jabber/HTTPBinding/Client.html#method-c-new","(jid)","<p>Initialize\n<p>jid &mdash; <p>JID or String &mdash; \n\n"],["new","Jabber::IdGenerator","Jabber/IdGenerator.html#method-c-new","()",""],["new","Jabber::Iq","Jabber/Iq.html#method-c-new","(type = nil, to = nil)","<p>Build a new &lt;iq/&gt; stanza\n<p>type &mdash; <p>Symbol &mdash; or nil, see Iq#type\n\n<p>to &mdash; <p>JID &mdash; Recipient\n"],["new","Jabber::JID","Jabber/JID.html#method-c-new","(node = \"\", domain = nil, resource = nil)","<p>Create a new JID. If called as new(‘a@b/c’), parse the string and split\n(node, domain, resource)\n"],["new","Jabber::MUC::IqQueryMUCAdminItem","Jabber/MUC/IqQueryMUCAdminItem.html#method-c-new","(affiliation=nil, role=nil, jid=nil)",""],["new","Jabber::MUC::MUCBrowser","Jabber/MUC/MUCBrowser.html#method-c-new","(stream)","<p>Initialize a new MUCBrowser helper\n"],["new","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-c-new","(stream)","<p>Initialize a MUCClient\n<p>Call MUCClient#join <strong>after</strong> you have registered your\ncallbacks to avoid reception …\n"],["new","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-c-new","(stream)","<p>Initialize a SimpleMUCClient\n<p>stream &mdash; <p>Stream &mdash; to operate on\n\n<p>jid &mdash; <p>JID &mdash; room@component/nick\n"],["new","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-c-new","(to=nil, reason=nil)",""],["new","Jabber::MUC::XMUCUserItem","Jabber/MUC/XMUCUserItem.html#method-c-new","(affiliation=nil, role=nil, jid=nil)",""],["new","Jabber::Message","Jabber/Message.html#method-c-new","(to = nil, body = nil)","<p>Create a new message\n<p>&gt;to &mdash; a JID or a String object to send the message to.\n<p>&gt;body &mdash; the message’s body …\n"],["new","Jabber::NoNameXmlnsRegistered","Jabber/NoNameXmlnsRegistered.html#method-c-new","(klass)",""],["new","Jabber::Presence","Jabber/Presence.html#method-c-new","(show=nil, status=nil, priority=nil)","<p>Create presence stanza\n<p>show &mdash; <p>String &mdash; Initial Availability Status\n\n<p>status &mdash; <p>String &mdash; Initial status message\n"],["new","Jabber::PubSub::Item","Jabber/PubSub/Item.html#method-c-new","(id=nil)",""],["new","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-c-new","(stream)","<p>Initialize a new NodeBrowser new(stream,pubsubservice)\n<p>stream &mdash; <p>Jabber::Stream &mdash; \n\n"],["new","Jabber::PubSub::NodeConfig","Jabber/PubSub/NodeConfig.html#method-c-new","(node = nil, options = nil)","<p>Construct a &lt;configure&gt; element.\n<p>node &mdash; <p>String &mdash; the node to configure\n\n<p>options &mdash; <p>Hash &mdash; the configuration …\n"],["new","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-c-new","(stream, jid, nodename = nil, create_if_not_exist = true)","<p>creates a new node new(client,service,nodename)\n<p>stream &mdash; <p>Jabber::Stream &mdash; \n<p>jid &mdash; <p>String &mdash; (jid of the pubsub service) …\n\n"],["new","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-c-new","(stream, pubsubjid)","<p>Creates a new representation of a pubsub service\n<p>stream &mdash; <p>Jabber::Stream &mdash; \n<p>pubsubjid &mdash; <p>String &mdash; or [Jabber::JID] …\n\n\n"],["new","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-c-new","(myjid=nil,mynode=nil,mysubid=nil,mysubscription=nil)",""],["new","Jabber::PubSub::SubscriptionConfig","Jabber/PubSub/SubscriptionConfig.html#method-c-new","(node = nil, jid = nil, options = nil, subid = nil)","<p>Construct a new Options stanza\n<p>node &mdash; <p>String &mdash; the node to which this subscription applies\n\n<p>jid &mdash; <p>String &mdash; or [Jabber::JID] …\n"],["new","Jabber::PubSub::Unsubscribe","Jabber/PubSub/Unsubscribe.html#method-c-new","(myjid=nil,mynode=nil)",""],["new","Jabber::RPC::Client","Jabber/RPC/Client.html#method-c-new","(stream,jid)","<p>xmppstream\n<p>stream &mdash; <p>Stream &mdash; \n\n<p>jid where you want to send the rpc requests to\n<p>jid &mdash; <p>JID &mdash; rpcserver@jabberserver/ressource …\n"],["new","Jabber::RPC::Server","Jabber/RPC/Server.html#method-c-new","(stream,class_delim=\".\")","<p>new - creates a new server\n"],["new","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-c-new","(stream)","<p>Initialize a new Roster helper\n<p>Registers its cbs (prio = 120, ref = self)\n<p>Request a roster (Remember to …\n"],["new","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-c-new","(stream)","<p>Initialize an empty RosterItem\n"],["new","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-c-new","(jid=nil, iname=nil, subscription=nil, ask=nil)","<p>Construct a new roster item\n<p>jid &mdash; <p>JID &mdash; Jabber ID\n\n<p>iname &mdash; <p>String &mdash; Name in the roster\n"],["new","Jabber::Roster::XRosterItem","Jabber/Roster/XRosterItem.html#method-c-new","(jid=nil, iname=nil)","<p>Construct a new roster item\n<p>jid &mdash; <p>JID &mdash; Jabber ID\n\n<p>iname &mdash; <p>String &mdash; Name in the roster\n"],["new","Jabber::SASL","Jabber/SASL.html#method-c-new","(stream, mechanism)","<p>Factory function to obtain a SASL helper for the specified mechanism\n"],["new","Jabber::SASL::Base","Jabber/SASL/Base.html#method-c-new","(stream)",""],["new","Jabber::SASL::DigestMD5","Jabber/SASL/DigestMD5.html#method-c-new","(stream)","<p>Sends the wished auth mechanism and wait for a challenge\n<p>(proceed with DigestMD5#auth)\n"],["new","Jabber::Semaphore","Jabber/Semaphore.html#method-c-new","(val=0)","<p>Initialize new semaphore\n<p>val &mdash; <p>Integer &mdash; number of threads, that can enter to section\n\n\n"],["new","Jabber::Simple","Jabber/Simple.html#method-c-new","(jid, password, status = nil, status_message = \"Available\")","<p>Create a new Jabber::Simple client. You will be automatically connected to\nthe Jabber server and your …\n"],["new","Jabber::Stream","Jabber/Stream.html#method-c-new","()","<p>Initialize a new stream\n"],["new","Jabber::Stream::ThreadBlock","Jabber/Stream/ThreadBlock.html#method-c-new","(block)",""],["new","Jabber::StreamParser","Jabber/StreamParser.html#method-c-new","(stream, listener)","<p>Constructs a parser for the supplied stream (socket input)\n<p>stream &mdash; <p>IO &mdash; Socket input stream\n\n<p>listener &mdash; <p>Object.receive(XMPPStanza) … &mdash; "],["new","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-c-new","(artist = nil, title = nil, length = nil, track = nil, source = nil, uri = nil, rating = nil)","<p>Construct a new &lt;tune&gt; element.\n<p>Supply no arguments to make an empty element to indicate that tune …\n"],["new","Jabber::Vcard::Helper","Jabber/Vcard/Helper.html#method-c-new","(stream)","<p>Initialize a new Vcard helper\n"],["new","Jabber::Vcard::IqVcard","Jabber/Vcard/IqVcard.html#method-c-new","(fields=nil)","<p>Initialize a &lt;vCard/&gt; element\n<p>fields &mdash; <p>Hash &mdash; Initialize with keys as XPath element names and values …\n\n\n"],["new","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-c-new","(iname=nil, version=nil, os=nil)","<p>Create a new &lt;query xmlns=‘jabber:iq:version’/&gt; element\n"],["new","Jabber::Version::Responder","Jabber/Version/Responder.html#method-c-new","(stream)","<p>Initialize a new version responder\n<p>Registers it’s callback (prio = 180, ref = self)\n<p>stream &mdash; <p>Stream &mdash; Where …\n"],["new","Jabber::Version::SimpleResponder","Jabber/Version/SimpleResponder.html#method-c-new","(stream, name, version, os=nil)","<p>Initialize a new version responder\n<p>Registers it’s callback (prio = 180, ref = self)\n<p>stream &mdash; <p>Stream &mdash; Where …\n"],["new","Jabber::XHTML::HTML","Jabber/XHTML/HTML.html#method-c-new","(contents=[])","<p>Initialize element with HTML contents (see HTML#contents=)\n"],["new","Jabber::XMPPElement","Jabber/XMPPElement.html#method-c-new","(*arg)","<p>Initialize this element, which will then be initialized with the name\nregistered with name_xmlns.\n"],["new_authset","Jabber::Iq","Jabber/Iq.html#method-c-new_authset","(jid, password)","<p>Create a new jabber:iq:auth set Stanza.\n"],["new_authset_digest","Jabber::Iq","Jabber/Iq.html#method-c-new_authset_digest","(jid, session_id, password)","<p>Create a new jabber:iq:auth set Stanza for Digest authentication\n"],["new_browseget","Jabber::Iq","Jabber/Iq.html#method-c-new_browseget","()","<p>Create a new jabber:iq:roster get Stanza.\n"],["new_query","Jabber::Iq","Jabber/Iq.html#method-c-new_query","(type = nil, to = nil)","<p>Create a new Iq stanza with an unspecified query child (&lt;query/&gt; has\nno namespace)\n"],["new_register","Jabber::Iq","Jabber/Iq.html#method-c-new_register","(username=nil, password=nil)","<p>Create a new jabber:iq:register set stanza for service/server registration\n<p>username &mdash; <p>String &mdash; (Element will …\n\n"],["new_registerget","Jabber::Iq","Jabber/Iq.html#method-c-new_registerget","()","<p>Create a new jabber:iq:register get stanza for retrieval of accepted\nregistration information\n"],["new_rosterget","Jabber::Iq","Jabber/Iq.html#method-c-new_rosterget","()","<p>Create a new jabber:iq:roster get Stanza.\n<p>IqQueryRoster is unused here because possibly not require’d …\n"],["new_rosterset","Jabber::Iq","Jabber/Iq.html#method-c-new_rosterset","()","<p>Create a new jabber:iq:roster set Stanza.\n"],["new_subscriptions","Jabber::Simple","Jabber/Simple.html#method-i-new_subscriptions","(&block)","<p>Returns an array of subscription notifications received since the last time\nnew_subscriptions was called. …\n"],["new_subscriptions?","Jabber::Simple","Jabber/Simple.html#method-i-new_subscriptions-3F","()","<p>Returns true if there are unprocessed presence updates waiting in the\nqueue, false otherwise.\n"],["nick","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-nick","()","<p>The MUCClient’s own nick (= resource)\n<p>result &mdash; <p>String &mdash; Nickname\n\n\n"],["nick","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-nick","()",""],["nick=","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-nick-3D","(new_nick)","<p>Change nick\n<p>Threading is, again, suggested. This method waits for two &lt;presence/&gt;\nstanzas, one indicating …\n"],["nick=","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-nick-3D","(n)",""],["node","Jabber::Caps::C","Jabber/Caps/C.html#method-i-node","()","<p>Get the value of this element’s ‘node’ attribute, a ‘unique identifier for\nthe software underlying the …\n"],["node","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-node","()","<p>Get the node of the Command stanza\n<p>result &mdash; <p>String &mdash; or nil\n\n\n"],["node","Jabber::Discovery::IqQueryDiscoInfo","Jabber/Discovery/IqQueryDiscoInfo.html#method-i-node","()","<p>Get the queried Service Discovery node or nil\n<p>See IqQueryDiscoItems#node for a small explanation of this. …\n"],["node","Jabber::Discovery::IqQueryDiscoItems","Jabber/Discovery/IqQueryDiscoItems.html#method-i-node","()","<p>Get the queried Service Discovery node or nil\n<p>A Service Discovery node is <em>not</em> a JID node, this may be …\n"],["node","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-node","()","<p>Get the item’s Service Discovery node or nil\n<p>result &mdash; <p>String &mdash; \n\n"],["node","Jabber::JID","Jabber/JID.html#method-i-node","()","<p>Get the JID’s node\n"],["node","Jabber::PubSub::Configuration","Jabber/PubSub/Configuration.html#method-i-node","()",""],["node","Jabber::PubSub::Items","Jabber/PubSub/Items.html#method-i-node","()",""],["node","Jabber::PubSub::Publish","Jabber/PubSub/Publish.html#method-i-node","()","<p>return the node for this publication\n"],["node","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-node","()",""],["node","Jabber::PubSub::Unsubscribe","Jabber/PubSub/Unsubscribe.html#method-i-node","()","<p>shows the node\n<p>return &mdash; <p>String &mdash; \n\n"],["node=","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-node-3D","(v)","<p>Set the node of the Command stanza\n<p>v &mdash; <p>String &mdash; or nil\n\n\n"],["node=","Jabber::Discovery::IqQueryDiscoInfo","Jabber/Discovery/IqQueryDiscoInfo.html#method-i-node-3D","(val)","<p>Get the queried Service Discovery node or nil\n<p>val &mdash; <p>String &mdash; \n\n"],["node=","Jabber::Discovery::IqQueryDiscoItems","Jabber/Discovery/IqQueryDiscoItems.html#method-i-node-3D","(val)","<p>Get the queried Service Discovery node or nil\n"],["node=","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-node-3D","(val)","<p>Set the item’s Service Discovery node\n<p>val &mdash; <p>String &mdash; \n\n"],["node=","Jabber::JID","Jabber/JID.html#method-i-node-3D","(v)","<p>Set the JID’s node\n"],["node=","Jabber::PubSub::Configuration","Jabber/PubSub/Configuration.html#method-i-node-3D","(node)",""],["node=","Jabber::PubSub::Items","Jabber/PubSub/Items.html#method-i-node-3D","(mynodename)",""],["node=","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-node-3D","(mynode)",""],["node=","Jabber::PubSub::Unsubscribe","Jabber/PubSub/Unsubscribe.html#method-i-node-3D","(mynode)","<p>sets the node\n<p>:: [String]\n"],["nodes","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-i-nodes","(jid)","<p>Retrieve the nodes Throws an ServerError when receiving <code>&lt;iq\ntype='error'/&gt;</code>\n<p>jid &mdash; <p>JID &mdash; Target entity …\n\n"],["nodes_names","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-i-nodes_names","(jid)","<p>Retrieve the nodes with names Throws a ServerError when receiving\n<code>&lt;iq type='error'/&gt;</code>\n<p>jid &mdash; <p>Jabber::JID … &mdash; "],["normalize","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-normalize","()","<p>Makes some changes to the structure of an XML element to help it respect\nthe specification. For example, …\n"],["now_playing","Jabber::UserTune::Helper","Jabber/UserTune/Helper.html#method-i-now_playing","(track)","<p>Send out the tune currently playing.\n<p>track &mdash; <p>Jabber::UserTune::Tune &mdash; the tune currently playing\n\n\n"],["offer","Jabber::FileTransfer::Helper","Jabber/FileTransfer/Helper.html#method-i-offer","(jid, source, desc=nil, from=nil)","<p>Offer a file to somebody\n<p>Will wait for a response from the peer\n<p>The result is a stream which you can configure, …\n"],["offset","Jabber::Bytestreams::IqSiFileRange","Jabber/Bytestreams/IqSiFileRange.html#method-i-offset","()","<p>File offset (for continuing an interrupted transfer)\n"],["offset=","Jabber::Bytestreams::IqSiFileRange","Jabber/Bytestreams/IqSiFileRange.html#method-i-offset-3D","(o)","<p>Set file offset\n"],["on_exception","Jabber::Stream","Jabber/Stream.html#method-i-on_exception","(&block)","<p>Mounts a block to handle exceptions if they occur during the poll send. \nThis will likely be the first …\n"],["on_join","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-on_join","(&block)","<p>Block to be called when somebody enters the room\n<p>If there is a non-nil time passed to the block, chances …\n"],["on_leave","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-on_leave","(&block)","<p>Block to be called when somebody leaves the room\n<p>block &mdash; Takes two arguments: time, nickname\n\n"],["on_message","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-on_message","(&block)","<p>Block to be invoked when a message from a participant to the whole room\narrives\n<p>block &mdash; Takes three arguments: …\n\n"],["on_private_message","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-on_private_message","(&block)","<p>Block to be invoked when a private message from a participant to you\narrives.\n<p>block &mdash; Takes three arguments: …\n\n"],["on_room_message","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-on_room_message","(&block)","<p>Block to be invoked when a message <strong>from</strong> the room arrives\n<p>Example:\n\n<pre>Astro has joined this session</pre>\n"],["on_self_leave","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-on_self_leave","(&block)","<p>Block to be called when <strong>you</strong> leave the room\n<p>Deactivation occurs <strong>afterwards</strong>.\n<p>block &mdash; Takes one argument: time …\n"],["on_subject","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-on_subject","(&block)","<p>Block to be invoked when somebody sets a new room subject\n<p>block &mdash; Takes three arguments: time, nickname, …\n\n"],["on_unhandled_iq","Jabber::Framework::Base","Jabber/Framework/Base.html#method-i-on_unhandled_iq","(iq)",""],["online?","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-online-3F","()","<p>Is any presence of this person on-line?\n<p>(Or is there any presence? Unavailable presences are deleted.) …\n"],["open","File::Tail::Logfile","File/Tail/Logfile.html#method-c-open","(filename, opts = {})","<p>This method creates an File::Tail::Logfile object and yields to it, and\ncloses it, if a block is given, …\n"],["open","Jabber::Bytestreams::IBBInitiator","Jabber/Bytestreams/IBBInitiator.html#method-i-open","()","<p>Open the stream to the peer, waits for successful result\n<p>May throw ServerError\n"],["open","Jabber::Bytestreams::SOCKS5BytestreamsInitiator","Jabber/Bytestreams/SOCKS5BytestreamsInitiator.html#method-i-open","()","<p>Send the configured streamhosts to the target, wait for an answer and\nconnect to the host the target …\n"],["options","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-options","()","<p>Get the options (in a Data Form with type=‘form’)\n"],["options","Jabber::PubSub::Configuration","Jabber/PubSub/Configuration.html#method-i-options","()","<p>get a list of the configured options represented by this stanza\n<p>return &mdash; <p>Hash &mdash; the options and their values …\n\n\n"],["options=","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-options-3D","(hsh)","<p>Set the options\n"],["options=","Jabber::PubSub::Configuration","Jabber/PubSub/Configuration.html#method-i-options-3D","(options)",""],["options_for","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-options_for","(plugin)","<p>Call and pass a plugin to return any config file options for that plugin.\n"],["os","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-os","()","<p>Get the operating system or nil (os is not mandatory for Version Query)\n"],["os=","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-os-3D","(text)","<p>Set the os of the software\n<p>text &mdash; <p>String &mdash; or nil\n\n\n"],["owner?","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-owner-3F","()",""],["parent=","Jabber::XMPPElement","Jabber/XMPPElement.html#method-i-parent-3D","(new_parent)",""],["parse","Jabber::StreamParser","Jabber/StreamParser.html#method-i-parse","()","<p>Begins parsing the XML stream and does not return until the stream closes.\n"],["parse_failure","Jabber::Stream","Jabber/Stream.html#method-i-parse_failure","(e)","<p>This method is called by the parser when a failure occurs\n"],["parser_end","Jabber::Stream","Jabber/Stream.html#method-i-parser_end","()","<p>This method is called by the parser upon receiving\n<code>&lt;/stream:stream&gt;</code>\n"],["password","Jabber::MUC::XMUC","Jabber/MUC/XMUC.html#method-i-password","()","<p>Text content of the <code>&lt;password/&gt;</code> element\n"],["password=","Jabber::Client","Jabber/Client.html#method-i-password-3D","(new_password)","<p>Change the client’s password\n<p>Threading is suggested, as this code waits for an answer.\n<p>Raises an exception …\n"],["password=","Jabber::MUC::XMUC","Jabber/MUC/XMUC.html#method-i-password-3D","(s)","<p>Set the password for joining a room (text content of the\n<code>&lt;password/&gt;</code> element)\n"],["payload","Jabber::PubSub::Event","Jabber/PubSub/Event.html#method-i-payload","()","<p>return payload\n"],["payload=","Jabber::PubSub::Event","Jabber/PubSub/Event.html#method-i-payload-3D","(pl)","<p>add payload\n<p>payload &mdash; <p>REXML::Element &mdash; \n\n"],["peer_sock","Jabber::Bytestreams::SOCKS5BytestreamsServer","Jabber/Bytestreams/SOCKS5BytestreamsServer.html#method-i-peer_sock","(addr)","<p>Find the socket a peer is associated to\n<p>This method also performs some housekeeping, ie. removing peers …\n"],["photo_binval","Jabber::Vcard::IqVcard","Jabber/Vcard/IqVcard.html#method-i-photo_binval","()","<p>Get the PHOTO/BINVAL (Avatar picture) field decoded from Base64\n<p>result &mdash; <p>String &mdash; or [nil]\n\n\n"],["pid","Pidify","Pidify.html#method-c-pid","()","<p>Returns the PID stored in the pid_file (not necessarily the PID of this\nscript).  Returns nil if no  …\n"],["pid_directory","Pidify","Pidify.html#method-c-pid_directory","()","<p>Returns the Pathname of the PID storage directory (defaults to /var/run).\n"],["pid_directory=","Pidify","Pidify.html#method-c-pid_directory-3D","(dir)","<p>Sets the PID storage directory (defaults to /var/run).  Be VERY CAREFUL\nusing this, as delete_pid will …\n"],["pid_end","Pidify","Pidify.html#method-c-pid_end","(signals=%w(SIGTERM SIGQUIT SIGKILL), secs_between_signal=4)","<p>Sends each kill signal to the saved PID, pausing for secs_between_signal\nafter each to check if it the …\n"],["pid_exists?","Pidify","Pidify.html#method-c-pid_exists-3F","()","<p>Returns true if the pid_file exists for this script.\n"],["pid_file","Pidify","Pidify.html#method-c-pid_file","()","<p>Returns the PID filename as a Pathname.\n"],["playing?","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-playing-3F","()","<p>Returns true if a tune is currently playing, otherwise false.\n"],["port","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-port","()","<p>Get the port number of the streamhost\n"],["port=","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-port-3D","(p)","<p>Set the port number of the streamhost\n"],["position","REXML::IOSource","REXML/IOSource.html#method-i-position","()",""],["presence","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-presence","(jid)","<p>Get specific presence\n<p>jid &mdash; <p>JID &mdash; Full JID\n\n\n"],["presence_updates","Jabber::Simple","Jabber/Simple.html#method-i-presence_updates","(&block)","<p>Returns an array of presence updates received since the last time\npresence_updates was called. Passing …\n"],["presence_updates?","Jabber::Simple","Jabber/Simple.html#method-i-presence_updates-3F","()","<p>Returns true if there are unprocessed presence updates waiting in the\nqueue, false otherwise.\n"],["priority","Jabber::Presence","Jabber/Presence.html#method-i-priority","()","<p>Get presence priority, or nil if absent\n<p>result &mdash; <p>Integer &mdash; \n\n"],["priority=","Jabber::Presence","Jabber/Presence.html#method-i-priority-3D","(val)","<p>Set presence priority\n<p>val &mdash; <p>Integer &mdash; Priority value between -128 and +127\n\n\n<p><strong>Warning:</strong> negative values make you ...\n"],["process","Jabber::CallbackList","Jabber/CallbackList.html#method-i-process","(*e)","<p>Process an element through all my callbacks. returns e.consumed?\n<p>e &mdash; <p>Object &mdash; The elements to pass to the …\n\n\n"],["profile","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-profile","()","<p>Stream profile, can indicate file-transfer\n"],["profile=","Jabber::Bytestreams::IqSi","Jabber/Bytestreams/IqSi.html#method-i-profile-3D","(s)","<p>Set stream profile\n"],["promote","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-promote","(recipients)","<p>Promote one or more users in the room to moderator.\n<p>Will wait for response, possibly raising ServerError …\n"],["publish_content","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-publish_content","(items)","<p>publishing content on this node publish_content(items)\n<p>items &mdash; <p>REXML::Element &mdash; \n\n"],["publish_item_to","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-publish_item_to","(node,item)","<p>NOTE: this method sends only one item per publish request because some\nservices  may not allow batch …\n"],["publish_item_with_id_to","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-publish_item_with_id_to","(node,item,id)","<p>node &mdash; <p>String &mdash; \n<p>item &mdash; <p>REXML::Element &mdash; \n<p>id &mdash; <p>String &mdash; \n<p>return &mdash; true\n\n"],["pubsub","Jabber::Iq","Jabber/Iq.html#method-i-pubsub","()","<p>Returns the iq’s &lt;pubsub/&gt; child, or nil\n<p>result &mdash; <p>IqVcard &mdash; \n\n"],["purge_items","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-purge_items","()","<p>purge all items from this node purge_items\n"],["purge_items_from","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-purge_items_from","(node)","<p>purges all items on a persistent node\n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; true\n\n"],["query","Jabber::Iq","Jabber/Iq.html#method-i-query","()","<p>Returns the iq’s query child, or nil\n<p>result &mdash; <p>IqQuery &mdash; \n\n"],["query=","Jabber::Iq","Jabber/Iq.html#method-i-query-3D","(newquery)","<p>Delete old elements named newquery.name\n<p>newquery &mdash; <p>REXML::Element &mdash; will be added\n\n\n"],["query_streamhost","Jabber::Bytestreams::SOCKS5Bytestreams","Jabber/Bytestreams/SOCKS5Bytestreams.html#method-c-query_streamhost","(stream, streamhost, my_jid=nil)","<p>Query a JID for its stream-host information\n<p>SOCKS5BytestreamsInitiator#add_streamhost can do this for …\n"],["queryns","Jabber::Iq","Jabber/Iq.html#method-i-queryns","()","<p>Returns the iq’s query’s namespace, or nil\n<p>result &mdash; <p>String &mdash; \n\n"],["raise","Jabber::Stream::ThreadBlock","Jabber/Stream/ThreadBlock.html#method-i-raise","(exception)",""],["range","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-range","()","<p>&lt;range/&gt; child\n<p>A file-transfer offer may contain this with no attributes set, indicating\nthe ability …\n"],["rating","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-rating","()","<p>Get the rating for this track\n"],["read","Jabber::Bytestreams::IBB","Jabber/Bytestreams/IBB.html#method-i-read","()","<p>Receive data\n<p>Will wait until the Message with the next sequence number is in the stanza\nqueue.\n"],["read","Jabber::Bytestreams::SOCKS5Bytestreams","Jabber/Bytestreams/SOCKS5Bytestreams.html#method-i-read","(length=nil)","<p>Receive from the stream-host\n<p>length &mdash; <p>Fixnum &mdash; Amount of bytes (Will be passed to TCPSocket#read for the underlying …\n\n"],["read","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-read","(length=512)","<p>Because it can_range?, this method implements length checking\n"],["read","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-read","(length=nil)","<p>Read a chunk from the source\n<p>If this is a ranged transfer, it should implement length checking\n<p>length &mdash; "],["read_data","EmailStats","EmailStats.html#method-i-read_data","()","<p>If a data file exists for the current month, read it and import the YAML\ndata.\n"],["reason","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-reason","()",""],["reason","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-reason","()",""],["reason=","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-reason-3D","(s)",""],["reason=","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-reason-3D","(s)",""],["receive","Jabber::Stream","Jabber/Stream.html#method-i-receive","(element)","<p>Processes a received REXML::Element and executes registered thread blocks\nand filters against it.\n<p>element … &mdash; "],["receive_iq","Jabber::Roster::IqQueryRoster","Jabber/Roster/IqQueryRoster.html#method-i-receive_iq","(iq, filter=true)","<p>Update roster by &lt;iq/&gt; stanza (to be fed by an iq_callback)\n<p>iq &mdash; <p>Iq &mdash; Containing new roster\n\n<p>filter &mdash; <p>Boolean … &mdash; "],["received_messages","Jabber::Simple","Jabber/Simple.html#method-i-received_messages","(&block)","<p>Returns an array of messages received since the last time received_messages\nwas called. Passing a block …\n"],["received_messages?","Jabber::Simple","Jabber/Simple.html#method-i-received_messages-3F","()","<p>Returns true if there are unprocessed received messages waiting in the\nqueue, false otherwise.\n"],["recent_file","EmailStats","EmailStats.html#method-i-recent_file","()",""],["reconnect","Jabber::Simple","Jabber/Simple.html#method-i-reconnect","()","<p>Use this to force the client to reconnect after a force_disconnect.\n"],["register","Jabber::Client","Jabber/Client.html#method-i-register","(password, fields={})","<p>Register a new user account (may be used instead of Client#auth)\n<p>This method may raise ServerError if …\n"],["register_info","Jabber::Client","Jabber/Client.html#method-i-register_info","()","<p>Get instructions and available fields for registration\n<p>return &mdash; <p>instructions, fields &mdash; Where instructions …\n\n\n"],["register_plugins","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-register_plugins","()","<p>Calls load on all files in the plugins_path ending with “-plugin.rb”.\n"],["remove","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-remove","()","<p>Remove item\n<p>This cancels both subscription <strong>from</strong> the contact to you and\nfrom you <strong>to</strong> the contact.\n<p>The methods …\n"],["remove","Jabber::Simple","Jabber/Simple.html#method-i-remove","(*jids)","<p>Remove the jabber users specified by jids from the contact list.\n"],["remove_registration","Jabber::Client","Jabber/Client.html#method-i-remove_registration","()","<p>Remove the registration of a user account\n<p><strong>WARNING:</strong> this deletes your roster and everything else\nstored ...\n"],["replace_element_text","REXML::Element","REXML/Element.html#method-i-replace_element_text","(e, t)","<p>Replaces or adds a child element of name <code>e</code> with text\n<code>t</code>.\n"],["required=","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-required-3D","(r)","<p>Set if this field is required\n<p>r &mdash; <p>true &mdash; or [false]\n\n\n"],["required?","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-required-3F","()","<p>Is this field required (has the &lt;required/&gt; child)?\n"],["reset_data","EmailStats","EmailStats.html#method-i-reset_data","()","<p>Store data in a hash keyed by day for the entire month.\n"],["resource","Jabber::JID","Jabber/JID.html#method-i-resource","()","<p>Get the JID’s resource\n"],["resource=","Jabber::JID","Jabber/JID.html#method-i-resource-3D","(v)","<p>Set the JID’s resource\n"],["role","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-role","()",""],["role=","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-role-3D","(r)",""],["room","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-room","()","<p>The room name (= node)\n<p>result &mdash; <p>String &mdash; Room name\n\n\n"],["roster","Jabber::Simple","Jabber/Simple.html#method-i-roster","()","<p>Direct access to the underlying Roster helper.\n"],["run","Jabber::Semaphore","Jabber/Semaphore.html#method-i-run","()","<p>Unlocks guarded section, increments number of free tickets\n"],["run_test","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-run_test","(domain)",""],["running?","Pidify","Pidify.html#method-c-running-3F","()","<p>Returns true if the process using pid is running.\n"],["save_pid","Pidify","Pidify.html#method-c-save_pid","()","<p>Saves the PID of this script into the pid_file.  Automatically called by\nstart.  Returns nil if the pid …\n"],["say","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-say","(text, to=nil)","<p>Send a simple text message\n<p>text &mdash; <p>String &mdash; Message body\n\n<p>to &mdash; <p>String &mdash; Optional nick if directed to specific user …\n"],["seek","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-seek","(position)",""],["seek","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-seek","(position)","<p>Seek in the source for ranged transfers\n"],["send","Jabber::HTTPBinding::Client","Jabber/HTTPBinding/Client.html#method-i-send","(xml, &block)","<p>Send a stanza, additionally with block\n<p>This method ensures a ‘jabber:client’ namespace for the stanza …\n"],["send","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-send","(stanza, to=nil)","<p>Send a stanza to the room\n<p>If stanza is a Jabber::Message, <code>stanza.type</code> will be\nautomatically set to :groupchat …\n"],["send","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-send","()","<p>Send the updated RosterItem to the server, i.e. if you modified iname,\ngroups, …\n"],["send","Jabber::Stream","Jabber/Stream.html#method-i-send","(xml, &block)","<p>Sends XML data to the socket and (optionally) waits to process received\ndata.\n<p>Do not invoke this in a …\n"],["send!","Jabber::Simple","Jabber/Simple.html#method-i-send-21","(msg)","<p>Send a Jabber stanza over-the-wire.\n"],["send_affiliations","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-send_affiliations","(items)","<p>Push a list of new affiliations to the room\n<p>items &mdash; <p>Array &mdash; of, or single [IqQueryMUCAdminItem]\n\n\n"],["send_buffered_emails","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-send_buffered_emails","(include_filename=nil)","<p>Sends all buffered emails now.  See send_email_buffered for more details.\nYou should never need to call …\n"],["send_data","Jabber::Stream","Jabber/Stream.html#method-i-send_data","(data)",""],["send_email","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-send_email","(data=nil, subject='')",""],["send_email","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-send_email","(text,include_filename=nil)","<p>Send an email message, if the Monitor#send_email is configured to do so. \nThis sends an immediate email; …\n"],["send_email_buffered","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-send_email_buffered","(text,frequency=nil,include_filename=nil)","<p>Like send_email, but only send one every frequency seconds including all\nbuffered emails for this plugin. …\n"],["send_im","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-send_im","(data)",""],["send_im","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-send_im","(text,include_filename=nil)","<p>Send an IM message, if the Monitor#send_im is configured to do so.\n"],["send_message","Jabber::Framework::Bot","Jabber/Framework/Bot.html#method-i-send_message","(to, text)","<p>Send a simple text chat message\n"],["send_message_xhtml","Jabber::Framework::Bot","Jabber/Framework/Bot.html#method-i-send_message_xhtml","(to, xhtml_contents, text=nil)","<p>Send an XHTML chat message\n<p>text &mdash; <p>String &mdash; alternate plain text body, generated from xhtml_contents if nil …\n\n\n"],["send_with_id","Jabber::Stream","Jabber/Stream.html#method-i-send_with_id","(xml, &block)","<p>Send an XMMP stanza with an Jabber::XMPPStanza#id. The id will be generated\nby Jabber::IdGenerator if …\n"],["sessionid","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-sessionid","()","<p>Get the sessionid of the Command stanza\n<p>result &mdash; <p>String &mdash; or nil\n\n\n"],["sessionid=","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-sessionid-3D","(v)","<p>Set the sessionid of the Command stanza\n<p>v &mdash; <p>String &mdash; or nil\n\n\n"],["set","Jabber::Vcard::Helper","Jabber/Vcard/Helper.html#method-c-set","(stream, iqvcard)","<p>Quickly initialize a Vcard helper and set your vCard. See Vcard#set\n"],["set","Jabber::Vcard::Helper","Jabber/Vcard/Helper.html#method-i-set","(iqvcard)","<p>Set your own vCard (Clients only)\n<p>Raises exception when setting fails\n<p>Usage of Threads suggested here, …\n"],["set_action","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-set_action","(v)","<p>Set the action of the Command stanza (chaining-friendly)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["set_actors","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-set_actors","(a)",""],["set_affiliation","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-set_affiliation","(v)",""],["set_body","Jabber::Message","Jabber/Message.html#method-i-set_body","(b)","<p>Sets the message’s body\n<p>b &mdash; <p>String &mdash; body to set\n\n<p>return &mdash; <p>REXML::Element &mdash; self for chaining\n"],["set_body","Jabber::XHTML::HTML","Jabber/XHTML/HTML.html#method-i-set_body","(body)","<p>Replace first XHTML::Body child (chainable)\n"],["set_category","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-set_category","(val)","<p>Set the identity’s category (chaining-friendly)\n<p>val &mdash; <p>String &mdash; \n\n"],["set_code","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-set_code","(i)","<p>Set the ‘Legacy error code’ (chaining-friendly)\n"],["set_config_for","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-set_config_for","(node, config)","<p>set configuration for a node\n<p>node &mdash; <p>String &mdash; \n<p>options &mdash; <p>Jabber::PubSub::NodeConfig &mdash; \n<p>return &mdash; true on success\n\n"],["set_configuration","Jabber::PubSub::NodeHelper","Jabber/PubSub/NodeHelper.html#method-i-set_configuration","(configuration,subid = nil)","<p>set the configuration of the node set_configuration(configuration=nil)\n<p>configuration &mdash; <p>Jabber::XData &mdash; \n<p>subid … &mdash; "],["set_contents","Jabber::XHTML::HTML","Jabber/XHTML/HTML.html#method-i-set_contents","(contents)","<p>HTML#contents= chainable\n"],["set_continue","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-set_continue","(c)",""],["set_continue","Jabber::MUC::XMUCUserItem","Jabber/MUC/XMUCUserItem.html#method-i-set_continue","(c)",""],["set_error","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-set_error","(s)","<p>Set the ‘XMPP error condition’ (chaining-friendly)\n"],["set_from","Jabber::Delay::XDelay","Jabber/Delay/XDelay.html#method-i-set_from","(jid)","<p>Set the timestamp’s origin (chaining-friendly)\n"],["set_from","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-set_from","(j)",""],["set_from","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-set_from","(v)","<p>set the from attribute (chaining-friendly)\n<p>v &mdash; <p>String &mdash; the value from set\n\n\n"],["set_id","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-set_id","(v)","<p>set the id attribute (chaining-friendly)\n<p>v &mdash; <p>String &mdash; the value id set\n\n\n"],["set_iname","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-set_iname","(val)","<p>Set the identity’s name (chaining-friendly)\n<p>val &mdash; <p>String &mdash; \n\n"],["set_iname","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-set_iname","(val)","<p>Set the item’s name (chaining-friendly)\n<p>val &mdash; <p>String &mdash; \n\n"],["set_iname","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-set_iname","(text)","<p>Set the name of the software (chaining-friendly)\n<p>result &mdash; <p>String &mdash; or nil\n\n\n"],["set_jid","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-set_jid","(val)","<p>Set the item’s jid (chaining-friendly)\n<p>val &mdash; <p>JID &mdash; \n\n"],["set_jid","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-set_jid","(j)",""],["set_nick","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-set_nick","(n)",""],["set_node","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-set_node","(v)","<p>Set the node of the Command stanza (chaining-friendly)\n<p>v &mdash; <p>String &mdash; or nil\n\n\n"],["set_node","Jabber::Discovery::IqQueryDiscoInfo","Jabber/Discovery/IqQueryDiscoInfo.html#method-i-set_node","(val)","<p>Get the queried Service Discovery node or nil (chaining-friendly)\n<p>val &mdash; <p>String &mdash; \n\n"],["set_node","Jabber::Discovery::IqQueryDiscoItems","Jabber/Discovery/IqQueryDiscoItems.html#method-i-set_node","(val)","<p>Get the queried Service Discovery node or nil (chaining-friendly)\n"],["set_node","Jabber::Discovery::Item","Jabber/Discovery/Item.html#method-i-set_node","(val)","<p>Set the item’s Service Discovery node (chaining-friendly)\n<p>val &mdash; <p>String &mdash; \n\n"],["set_options_for","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-set_options_for","(node, jid, options, subid = nil)","<p>set options for a subscription\n<p>node &mdash; <p>String &mdash; \n<p>jid &mdash; <p>Jabber::JID &mdash; or [String]\n\n<p>options &mdash; [Jabber::PubSub::SubscriptionConfig} …\n"],["set_os","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-set_os","(text)","<p>Set the os of the software (chaining-friendly)\n<p>text &mdash; <p>String &mdash; or nil\n\n\n"],["set_presence","Jabber::Framework::Bot","Jabber/Framework/Bot.html#method-i-set_presence","(show=nil, status=nil)","<p>Set and send a Presence\n"],["set_priority","Jabber::Presence","Jabber/Presence.html#method-i-set_priority","(val)","<p>Set presence priority (chaining-friendly)\n<p>val &mdash; <p>Integer &mdash; Priority value between -128 and +127\n\n\n"],["set_reason","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-set_reason","(s)",""],["set_reason","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-set_reason","(s)",""],["set_role","Jabber::MUC::UserItem","Jabber/MUC/UserItem.html#method-i-set_role","(r)",""],["set_sessionid","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-set_sessionid","(v)","<p>Set the sessionid of the Command stanza (chaining-friendly)\n<p>v &mdash; <p>String &mdash; or nil\n\n\n"],["set_show","Jabber::Presence","Jabber/Presence.html#method-i-set_show","(val)","<p>Set Availability Status (chaining-friendly)\n<p>val &mdash; <p>Symbol &mdash; or [Nil] See show for explanation\n\n\n"],["set_stamp","Jabber::Delay::XDelay","Jabber/Delay/XDelay.html#method-i-set_stamp","(t)","<p>Set the timestamp (chaining-friendly)\n"],["set_status","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-set_status","(v)","<p>Set the status of the Command stanza (chaining-friendly)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["set_status","Jabber::Presence","Jabber/Presence.html#method-i-set_status","(val)","<p>Set status message (chaining-friendly)\n<p>val &mdash; <p>String &mdash; or nil\n\n\n"],["set_subject","Jabber::Message","Jabber/Message.html#method-i-set_subject","(s)","<p>sets the message’s subject\n<p>s &mdash; <p>String &mdash; subject to set\n\n<p>return &mdash; <p>REXML::Element &mdash; self for chaining\n"],["set_text","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-set_text","(s)","<p>Set the errors &lt;text/&gt; element text (chaining-friendly)\n"],["set_thread","Jabber::Message","Jabber/Message.html#method-i-set_thread","(s)","<p>gets the message’s thread (chaining-friendly) Please note that this are not\n[Thread] but a [String]- …\n"],["set_to","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-set_to","(j)",""],["set_to","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-set_to","(v)","<p>set the to attribute (chaining-friendly)\n<p>v &mdash; <p>String &mdash; the value to set\n\n\n"],["set_type","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-set_type","(val)","<p>Set the identity’s type (chaining-friendly)\n<p>val &mdash; <p>String &mdash; \n\n"],["set_type","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-set_type","(t)","<p>Set the type of error (chaining-friendly)\n"],["set_type","Jabber::Iq","Jabber/Iq.html#method-i-set_type","(v)","<p>Set the type of the Iq stanza (chaining-friendly)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["set_type","Jabber::Message","Jabber/Message.html#method-i-set_type","(v)","<p>Set the type of the Message stanza (chaining-friendly)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["set_type","Jabber::Presence","Jabber/Presence.html#method-i-set_type","(val)","<p>Set type of presence (chaining-friendly)\n<p>val &mdash; <p>Symbol &mdash; See type for possible subscription types\n\n\n"],["set_type","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-set_type","(v)","<p>set the type attribute (chaining-friendly)\n<p>v &mdash; <p>String &mdash; the value type set\n\n\n"],["set_var","Jabber::Discovery::Feature","Jabber/Discovery/Feature.html#method-i-set_var","(val)","<p>Set the feature’s var (chaining-friendly)\n<p>val &mdash; <p>String &mdash; \n\n"],["set_version","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-set_version","(text)","<p>Set the version of the software (chaining-friendly)\n<p>text &mdash; <p>String &mdash; \n\n"],["set_xml_lang","Jabber::XMPPElement","Jabber/XMPPElement.html#method-i-set_xml_lang","(l)","<p>Set XML language attribute (chainable)\n"],["show","Jabber::Presence","Jabber/Presence.html#method-i-show","()","<p>Get Availability Status (RFC3921 - 5.2)\n<p>result &mdash; <p>Symbol &mdash; or [Nil] Valid values according to RFC3921:\n\n\n<p>nil ( …\n"],["show=","Jabber::Presence","Jabber/Presence.html#method-i-show-3D","(val)","<p>Set Availability Status\n<p>val &mdash; <p>Symbol &mdash; or [Nil] See show for explanation\n\n\n"],["show_config","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-show_config","()",""],["shut_down","CheckSize","CheckSize.html#method-i-shut_down","()",""],["shut_down","EmailStats","EmailStats.html#method-i-shut_down","()",""],["shut_down","TestPlugin","TestPlugin.html#method-i-shut_down","()",""],["sid","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-i-sid","()","<p>Session-ID\n"],["sid=","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-i-sid-3D","(s)","<p>Set Session-ID\n"],["signal","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-signal","()",""],["signal","BlacklistPlugin","BlacklistPlugin.html#method-i-signal","()",""],["signal","CheckSize","CheckSize.html#method-i-signal","()",""],["signal","FrequentSendersPlugin","FrequentSendersPlugin.html#method-i-signal","()",""],["signal","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-signal","()",""],["signal","SendmailBlacklistPlugin","SendmailBlacklistPlugin.html#method-i-signal","()",""],["signal","TestPlugin","TestPlugin.html#method-i-signal","()",""],["since","Time","Time.html#method-i-since","(older_time)","<p>Return the time difference (as a Float) between now and a specified older\nTime or parse-able String. …\n"],["since","Time","Time.html#method-c-since","(older_time)","<p>Return the time difference (as a Float) between now and a specified older\nTime or parse-able String. …\n"],["size","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-size","()","<p>File size in bytes\n<p>result &mdash; <p>Fixnum &mdash; \n\n"],["size","Jabber::FileTransfer::FileSource","Jabber/FileTransfer/FileSource.html#method-i-size","()",""],["size","Jabber::FileTransfer::TransferSource","Jabber/FileTransfer/TransferSource.html#method-i-size","()","<p>Size of the offered file\n"],["size=","Jabber::Bytestreams::IqSiFile","Jabber/Bytestreams/IqSiFile.html#method-i-size-3D","(s)","<p>Set file size\n"],["smtp_command","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-smtp_command","(text)",""],["smtp_connect","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-smtp_connect","(server)",""],["source","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-source","()","<p>Get the source of this tune, such as an album.\n"],["stamp","Jabber::Delay::XDelay","Jabber/Delay/XDelay.html#method-i-stamp","()","<p>Get the timestamp\n<p>result &mdash; <p>Time &mdash; or nil\n\n\n"],["stamp=","Jabber::Delay::XDelay","Jabber/Delay/XDelay.html#method-i-stamp-3D","(t)","<p>Set the timestamp\n<p>t &mdash; <p>Time &mdash; or nil\n\n\n"],["start","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-start","()","<p>Start monitoring the log files in @options.  If @options is empty, we\nmonitor @options.\n"],["start","Jabber::Bytestreams::SOCKS5BytestreamsPeer","Jabber/Bytestreams/SOCKS5BytestreamsPeer.html#method-i-start","()","<p>Start handshake process\n"],["start","Jabber::Client","Jabber/Client.html#method-i-start","()","<p>Start the stream-parser and send the client-specific stream opening element\n"],["start","Jabber::Component","Jabber/Component.html#method-i-start","()","<p>Start the stream-parser and send the component-specific stream opening\nelement\n"],["start","Jabber::Connection","Jabber/Connection.html#method-i-start","()","<p>Start the parser on the previously connected socket\n"],["start","Jabber::Stream","Jabber/Stream.html#method-i-start","(fd)","<p>Start the XML parser on the fd\n"],["start","Pidify","Pidify.html#method-c-start","()","<p>Saves the PID of this script into the pid_file by calling save_pid. Raises\nan exception if pid_exists …\n"],["start_as_daemon","Pidify","Pidify.html#method-c-start_as_daemon","(options={})","<p>Like Pidify.start, but first calls Pidify.daemonize.  Will fail and raise\nan exception if Pidify.running? …\n"],["start_up","ActiveBlacklistPlugin","ActiveBlacklistPlugin.html#method-i-start_up","()",""],["start_up","AtMailPlugin","AtMailPlugin.html#method-i-start_up","()",""],["start_up","BlacklistPlugin","BlacklistPlugin.html#method-i-start_up","()",""],["start_up","CGPClamAVCrash","CGPClamAVCrash.html#method-i-start_up","()",""],["start_up","CGPMcAfeeCounter","CGPMcAfeeCounter.html#method-i-start_up","()",""],["start_up","CGPMcAfeeSparkwatcher","CGPMcAfeeSparkwatcher.html#method-i-start_up","()",""],["start_up","CGPSpamCatcherCounter","CGPSpamCatcherCounter.html#method-i-start_up","()",""],["start_up","CheckSize","CheckSize.html#method-i-start_up","()",""],["start_up","CorruptedMailbox","CorruptedMailbox.html#method-i-start_up","()",""],["start_up","EmailStats","EmailStats.html#method-i-start_up","()",""],["start_up","FrequentSendersPlugin","FrequentSendersPlugin.html#method-i-start_up","()",""],["start_up","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-start_up","()",""],["start_up","MessageThrottleCounterPlugin","MessageThrottleCounterPlugin.html#method-i-start_up","()",""],["start_up","SendmailBlacklistPlugin","SendmailBlacklistPlugin.html#method-i-start_up","()",""],["start_up","SpoofedFromAddressPlugin","SpoofedFromAddressPlugin.html#method-i-start_up","()",""],["start_up","SyslogRemotePlugin","SyslogRemotePlugin.html#method-i-start_up","()",""],["start_up","TestPlugin","TestPlugin.html#method-i-start_up","()",""],["starttls","Jabber::Connection","Jabber/Connection.html#method-i-starttls","()","<p>Do a &lt;starttls/&gt; (will be automatically done by connect if stream\npeer supports this)\n"],["state","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-state","()",""],["state=","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-state-3D","(mystate)",""],["status","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-status","()","<p>Get the status of the Command stanza\n<p>The following Symbols are allowed:\n<p>:executing\n"],["status","Jabber::Presence","Jabber/Presence.html#method-i-status","()","<p>Get status message\n<p>result &mdash; <p>String &mdash; or nil\n\n\n"],["status","Jabber::Simple","Jabber/Simple.html#method-i-status","(presence, message)","<p>Set your presence, with a message.\n<p>Available values for presence are:\n\n<pre>* nil: online.\n* :chat: free for ...</pre>\n"],["status=","Jabber::Command::IqCommand","Jabber/Command/IqCommand.html#method-i-status-3D","(v)","<p>Set the status of the Command stanza (see IqCommand#status for details)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["status=","Jabber::Presence","Jabber/Presence.html#method-i-status-3D","(val)","<p>Set status message\n<p>val &mdash; <p>String &mdash; or nil\n\n\n"],["status_code","Jabber::MUC::XMUCUser","Jabber/MUC/XMUCUser.html#method-i-status_code","()","<p>Retrieve the three-digit code in <code>&lt;x\nxmlns='http://jabber.org/protocol/muc#user'><status\ncode='...'/&gt;&lt;/x&gt;</code> …\n"],["stop","Jabber::Stream","Jabber/Stream.html#method-i-stop","()",""],["stop","Pidify","Pidify.html#method-c-stop","(signals=%w(SIGTERM SIGQUIT SIGKILL), secs_between_signal=4)","<p>Deletes the saved PID file and, if the PID belongs to a process different\nfrom this script, sends kill …\n"],["stop_playing","Jabber::UserTune::Helper","Jabber/UserTune/Helper.html#method-i-stop_playing","()","<p>Use this method to indicate that you have stopped playing a tune.\n"],["streamhost_used","Jabber::Bytestreams::IqQueryBytestreams","Jabber/Bytestreams/IqQueryBytestreams.html#method-i-streamhost_used","()","<p>Get the &lt;streamhost-used/&gt; child\n<p>result &mdash; <p>StreamHostUsed &mdash; \n\n"],["strip","Jabber::JID","Jabber/JID.html#method-i-strip","()","<p>Returns a new JID with resource removed.\n<p>return &mdash; <p>JID &mdash; \n\n"],["strip!","Jabber::JID","Jabber/JID.html#method-i-strip-21","()","<p>Removes the resource (sets it to nil)\n<p>return &mdash; <p>JID &mdash; self\n\n\n"],["stripped?","Jabber::JID","Jabber/JID.html#method-i-stripped-3F","()","<p>Test id jid is strepped\n"],["subid","Jabber::PubSub::Items","Jabber/PubSub/Items.html#method-i-subid","()",""],["subid","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-subid","()",""],["subid","Jabber::PubSub::SubscriptionConfig","Jabber/PubSub/SubscriptionConfig.html#method-i-subid","()","<p>get the ‘subid’ attribute\n"],["subid=","Jabber::PubSub::Items","Jabber/PubSub/Items.html#method-i-subid-3D","(mysubid)",""],["subid=","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-subid-3D","(mysubid)",""],["subid=","Jabber::PubSub::SubscriptionConfig","Jabber/PubSub/SubscriptionConfig.html#method-i-subid-3D","(subid)","<p>set the ‘subid’ attribute\n<p>subid &mdash; <p>String &mdash; the subscription id\n\n\n"],["subject","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-subject","()","<p>Room subject/topic\n<p>result &mdash; <p>String &mdash; The subject\n\n\n"],["subject","Jabber::Message","Jabber/Message.html#method-i-subject","()","<p>Returns the message’s subject, or nil\n"],["subject=","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-subject-3D","(s)","<p>Change the room’s subject/topic\n<p>This will not be reflected by SimpleMUCClient#subject immediately, wait …\n"],["subject=","Jabber::Message","Jabber/Message.html#method-i-subject-3D","(s)","<p>sets the message’s subject\n<p>s &mdash; <p>String &mdash; subject to set\n\n\n"],["submit_room_configuration","Jabber::MUC::MUCClient","Jabber/MUC/MUCClient.html#method-i-submit_room_configuration","(options)",""],["subscribe","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-subscribe","()","<p>Send subscription request to the user\n<p>The block given to Jabber::Roster::Roster#add_update_callback will …\n"],["subscribe_to","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-subscribe_to","(node)","<p>subscribe to a node\n<p>node &mdash; <p>String &mdash; \n<p>return &mdash; <p>Hash &mdash; of { attributename =&gt; value }\n\n\n"],["subscribed_to?","Jabber::Simple","Jabber/Simple.html#method-i-subscribed_to-3F","(jid)","<p>Returns true if this Jabber account is subscribed to status updates for the\njabber user jid, false otherwise. …\n"],["subscription","Jabber::PubSub::Subscription","Jabber/PubSub/Subscription.html#method-i-subscription","()",""],["subscription","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-subscription","()","<p>Get subscription type of roster item\n<p>result &mdash; <p>Symbol &mdash; or [Nil] The following values are valid according to …\n\n\n"],["subscription=","Jabber::Roster::RosterItem","Jabber/Roster/RosterItem.html#method-i-subscription-3D","(val)","<p>Set subscription type of roster item\n<p>val &mdash; <p>Symbol &mdash; or [Nil] See subscription for possible Symbols\n\n\n"],["subscription_requests","Jabber::Simple","Jabber/Simple.html#method-i-subscription_requests","(&block)","<p>Returns an array of subscription notifications received since the last time\nsubscription_requests was …\n"],["supports_anonymous?","Jabber::Client","Jabber/Client.html#method-i-supports_anonymous-3F","()","<p>Reports whether or not anonymous authentication is reported by the client.\n<p>Returns true or false\n"],["tail","File::Tail","File/Tail.html#method-i-tail","(n = nil)","<p>This method tails this file and yields to the given block for every new\nline that is read. If no block …\n"],["tail","File::Tail::Logfile","File/Tail/Logfile.html#method-c-tail","(filename, opts = {}, &block)","<p>Like open, but yields to every new line encountered in the logfile in\n<code>block</code>.\n"],["text","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-text","()","<p>Get the errors &lt;text/&gt; element text\n<p>result &mdash; <p>String &mdash; or nil\n\n\n"],["text=","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-text-3D","(s)","<p>Set the errors &lt;text/&gt; element text (Previous &lt;text/&gt; elements\nwill be deleted first)\n<p>s &mdash; <p>String … &mdash; "],["thread","Jabber::Message","Jabber/Message.html#method-i-thread","()","<p>Returns the message’s thread, or nil\n"],["thread=","Jabber::Message","Jabber/Message.html#method-i-thread-3D","(s)","<p>sets the message’s thread\n<p>s &mdash; <p>String &mdash; thread to set\n\n\n"],["time_at_mark","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-time_at_mark","(label=:mark)","<p>After marking an optionally labeled time with mark_time, you can retrieve\nthe time marked with time_at_mark. …\n"],["time_since_mark","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-time_since_mark","(label=:mark, time=Time.now)","<p>After marking an optionally labeled time with mark_time, you can retrieve\nthe time difference between …\n"],["title","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-title","()","<p>Get the Data Form title\n<p>return &mdash; <p>XDataTitle &mdash; or nil\n\n\n"],["title","Jabber::Dataforms::XDataTitle","Jabber/Dataforms/XDataTitle.html#method-i-title","()",""],["title","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-title","()","<p>Get the title of this tune.\n"],["title=","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-title-3D","(title)","<p>Set the Data Form title\n<p>title &mdash; <p>String &mdash; \n\n"],["to","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-to","()",""],["to","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-to","()","<p>get the to attribute\n<p>return &mdash; <p>String &mdash; the element’s to attribute\n\n\n"],["to=","Jabber::MUC::XMUCUserInvite","Jabber/MUC/XMUCUserInvite.html#method-i-to-3D","(j)",""],["to=","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-to-3D","(v)","<p>set the to attribute\n<p>v &mdash; <p>String &mdash; the value to set\n\n\n"],["to_a","Jabber::Roster::IqQueryRoster","Jabber/Roster/IqQueryRoster.html#method-i-to_a","()","<p>Get all items\n<p>result &mdash; <p>Array &mdash; of [RosterItem]\n\n\n"],["to_s","Jabber::Dataforms::XDataInstructions","Jabber/Dataforms/XDataInstructions.html#method-i-to_s","()",""],["to_s","Jabber::Dataforms::XDataTitle","Jabber/Dataforms/XDataTitle.html#method-i-to_s","()",""],["to_s","Jabber::JID","Jabber/JID.html#method-i-to_s","()","<p>Returns a string representation of the JID\n<p>“”\n<p>“domain”\n"],["to_s","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-to_s","()","<p>String representation\n<p>result &mdash; <p>String &mdash; The PubSub service’s JID\n\n\n"],["to_text","Jabber::XHTML::HTML","Jabber/XHTML/HTML.html#method-i-to_text","()","<p>Convert contents of this XHTML container to plain text for easy usage with\nan additional fall-back &lt;body/&gt; …\n"],["track","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-track","()","<p>Get an identitier for this tune.\n"],["type","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-type","()","<p>Type of this Data Form\n<p>result &mdash; <p>:cancel\n<p>:form\n"],["type","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-type","()","<p>Type of this field\n<p>result &mdash; <p>:boolean\n<p>:fixed\n"],["type","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-type","()","<p>Get the identity’s type or nil\n<p>result &mdash; <p>String &mdash; \n\n"],["type","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-type","()","<p>Get the type of error (meaning how to proceed)\n<p>result &mdash; <p>Symbol &mdash; or [nil] as following:\n\n\n<p>:auth\n"],["type","Jabber::Iq","Jabber/Iq.html#method-i-type","()","<p>Get the type of the Iq stanza\n<p>The following values are allowed:\n<p>:get\n"],["type","Jabber::Message","Jabber/Message.html#method-i-type","()","<p>Get the type of the Message stanza\n<p>The following Symbols are allowed:\n<p>:chat\n"],["type","Jabber::Presence","Jabber/Presence.html#method-i-type","()","<p>Get type of presence\n<p>result &mdash; <p>Symbol &mdash; or [Nil] Possible values are:\n\n\n<p>:error\n"],["type","Jabber::PubSub::NodeBrowser","Jabber/PubSub/NodeBrowser.html#method-i-type","(jid,node)","<p>get type of node\n<p>jid &mdash; <p>Jabber::JID &mdash; \n<p>node &mdash; <p>String &mdash; \n\n"],["type","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-type","()","<p>get the type attribute\n<p>return &mdash; <p>String &mdash; the element’s type attribute\n\n\n"],["type=","Jabber::Dataforms::XData","Jabber/Dataforms/XData.html#method-i-type-3D","(t)","<p>Set the type (see type)\n"],["type=","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-type-3D","(t)","<p>Set the type of this field (see type)\n"],["type=","Jabber::Discovery::Identity","Jabber/Discovery/Identity.html#method-i-type-3D","(val)","<p>Set the identity’s type (see\nwww.jabber.org/registrar/disco-categories.html)\n<p>val &mdash; <p>String &mdash; \n\n"],["type=","Jabber::ErrorResponse","Jabber/ErrorResponse.html#method-i-type-3D","(t)","<p>Set the type of error (see ErrorResponse#type)\n"],["type=","Jabber::Iq","Jabber/Iq.html#method-i-type-3D","(v)","<p>Set the type of the Iq stanza (see Iq#type)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["type=","Jabber::Message","Jabber/Message.html#method-i-type-3D","(v)","<p>Set the type of the Message stanza (see Message#type for details)\n<p>v &mdash; <p>Symbol &mdash; or nil\n\n\n"],["type=","Jabber::Presence","Jabber/Presence.html#method-i-type-3D","(val)","<p>Set type of presence\n<p>val &mdash; <p>Symbol &mdash; See type for possible subscription types\n\n\n"],["type=","Jabber::XMPPStanza","Jabber/XMPPStanza.html#method-i-type-3D","(v)","<p>set the type attribute\n<p>v &mdash; <p>String &mdash; the value type set\n\n\n"],["typed_add","Jabber::RPC::IqQueryRPC","Jabber/RPC/IqQueryRPC.html#method-i-typed_add","(e)","<p>TODO: Is typed_add with a String right here?\n"],["typed_add","Jabber::XMPPElement","Jabber/XMPPElement.html#method-i-typed_add","(element)","<p>Add a child element which will be imported according to the child’s name\nand xmlns\n<p>element &mdash; <p>REXML::Element … &mdash; "],["typed_add","REXML::Element","REXML/Element.html#method-i-typed_add","(e)","<p>This method does exactly the same thing as add(), but it can be overriden\nby subclasses to provide on-the-fly …\n"],["unban","Jabber::MUC::SimpleMUCClient","Jabber/MUC/SimpleMUCClient.html#method-i-unban","(recipients)","<p>Unban one or more user jids for the room.\n<p>Will wait for response, possibly raising ServerError\n<p>Sample usage: …\n"],["unsubscribe","Jabber::Roster::Helper::RosterItem","Jabber/Roster/Helper/RosterItem.html#method-i-unsubscribe","()","<p>Unsubscribe from a contact’s presence\n<p>This method waits for a presence with type=‘unsubscribed’ from the …\n"],["unsubscribe_from","Jabber::PubSub::ServiceHelper","Jabber/PubSub/ServiceHelper.html#method-i-unsubscribe_from","(node, subid=nil)","<p>Unsubscribe from a node with an optional subscription id\n<p>May raise ServerError\n<p>node &mdash; <p>String &mdash; \n<p>subid &mdash; <p>String … &mdash; "],["uri","Jabber::UserTune::Tune","Jabber/UserTune/Tune.html#method-i-uri","()","<p>Get a URI that represents this tune.\n"],["user_by_message_id","FrequentSendersPlugin","FrequentSendersPlugin.html#method-i-user_by_message_id","(message_id)",""],["user_by_session_id","FrequentSendersPlugin","FrequentSendersPlugin.html#method-i-user_by_session_id","(session_id)",""],["user_by_session_id","MessageThrottleCounterPlugin","MessageThrottleCounterPlugin.html#method-i-user_by_session_id","(session_id)",""],["validate_address","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-validate_address","(addr)",""],["value","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-value","()","<p>Get the first value\n"],["value=","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-value-3D","(val)","<p>Remove all and set one value\n"],["values","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-values","()","<p>Get the values (in a Data Form with type=‘submit’)\n"],["values=","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-values-3D","(ary)","<p>Set the values\n"],["var","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-var","()",""],["var","Jabber::Discovery::Feature","Jabber/Discovery/Feature.html#method-i-var","()","<p>Get the feature’s var or nil\n<p>result &mdash; <p>String &mdash; \n\n"],["var=","Jabber::Dataforms::XDataField","Jabber/Dataforms/XDataField.html#method-i-var-3D","(s)",""],["var=","Jabber::Discovery::Feature","Jabber/Discovery/Feature.html#method-i-var-3D","(val)","<p>Set the feature’s var\n<p>This is a namespace the identity supports.\n<p>val &mdash; <p>String &mdash; \n\n"],["vcard","Jabber::Iq","Jabber/Iq.html#method-i-vcard","()","<p>Returns the iq’s &lt;vCard/&gt; child, or nil\n<p>result &mdash; <p>IqVcard &mdash; \n\n"],["ver","Jabber::Caps::C","Jabber/Caps/C.html#method-i-ver","()","<p>Get the value of this element’s ‘ver’ attribute, an opaque hash\nrepresenting this entity’s capabilities. …\n"],["ver","Jabber::Caps::Helper","Jabber/Caps/Helper.html#method-i-ver","()","<p>Generate ‘ver’, an opaque hash used to represent this entity’s capabilities\n<p>See www.xmpp.org/extensions/xep-0115.html#ver …\n"],["version","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-version","()","<p>Get the version of the software\n<p>result &mdash; <p>String &mdash; or nil\n\n\n"],["version=","Jabber::Version::IqQueryVersion","Jabber/Version/IqQueryVersion.html#method-i-version-3D","(text)","<p>Set the version of the software\n<p>The element won’t be deleted if text is nil as it must occur in a version …\n"],["wait","Jabber::Semaphore","Jabber/Semaphore.html#method-i-wait","()","<p>Waits until are available some free tickets\n"],["wait","Jabber::Stream::ThreadBlock","Jabber/Stream/ThreadBlock.html#method-i-wait","()",""],["wait_for_roster","Jabber::Roster::Helper","Jabber/Roster/Helper.html#method-i-wait_for_roster","()","<p>Wait for first roster query result to arrive\n"],["wakeup","Jabber::Stream::ThreadBlock","Jabber/Stream/ThreadBlock.html#method-i-wakeup","()",""],["warning_message","CGMonitor::Monitor","CGMonitor/Monitor.html#method-i-warning_message","(text)",""],["warning_message","CGMonitor::Plugin","CGMonitor/Plugin.html#method-i-warning_message","(text,include_filename=nil)","<p>Log a warning message.\n"],["write","Jabber::Bytestreams::IBB","Jabber/Bytestreams/IBB.html#method-i-write","(buf)","<p>Send data\n<p>Data is buffered to match block_size in each packet. If you need the data\nto be sent immediately, …\n"],["write","Jabber::Bytestreams::SOCKS5Bytestreams","Jabber/Bytestreams/SOCKS5Bytestreams.html#method-i-write","(buf)","<p>Send to the stream-host\n<p>buf &mdash; <p>String &mdash; Data\n\n<p>result &mdash; <p>Fixnum &mdash; Amount of bytes sent\n"],["write_data","EmailStats","EmailStats.html#method-i-write_data","(month=current_month)","<p>Dump the data into a YAML-encoded file for the month.\n"],["write_status","FrequentSpammerPlugin","FrequentSpammerPlugin.html#method-i-write_status","()",""],["x","Jabber::FeatureNegotiation::IqFeature","Jabber/FeatureNegotiation/IqFeature.html#method-i-x","()","<p>First &lt;x/&gt; child with xmlns=‘jabber:x:data’\n"],["x","Jabber::XParent","Jabber/XParent.html#method-i-x","(wanted_xmlns=nil)","<p>Get the first &lt;x/&gt; element in this stanza, or nil if none found.\n<p>wanted_xmlns &mdash; <p>String &mdash; Optional, find …\n\n\n"],["xml_lang","Jabber::XMPPElement","Jabber/XMPPElement.html#method-i-xml_lang","()","<p>Generic XML attribute ‘xml:lang’ (REXML provides no shortcut)\n"],["xml_lang=","Jabber::XMPPElement","Jabber/XMPPElement.html#method-i-xml_lang-3D","(l)","<p>Set XML language attribute\n"],["zeroconf","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-zeroconf","()","<p>Get the zeroconf attribute of the streamhost\n"],["zeroconf=","Jabber::Bytestreams::StreamHost","Jabber/Bytestreams/StreamHost.html#method-i-zeroconf-3D","(s)","<p>Set the zeroconf attribute of the streamhost\n"],["cgmonitor","","init_d/cgmonitor.html","","<p>#!/bin/bash # # chkconfig: 345 85 15 # description: CGMonitor Daemon\n<p># processname: cgmonitor\n<p>CGMONITOR_HOME …\n"]]}}